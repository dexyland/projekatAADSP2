1     	 0000					.public _inputGain
2     	 0000					.public _outputChannelNum
3     	 0000					.public _sampleBuffer
4     	 0000					.public _sampleBufferLeft
5     	 0000					.public _sampleBufferLeftSide
6     	 0000					.public _sampleBufferRight
7     	 0000					.public _sampleBufferRightSide
8     	 0000					.public _tremolo_data
9     	 0000					.extern _cl_wavread_bits_per_sample
10    	 0000					.extern _cl_wavread_close
11    	 0000					.extern _cl_wavread_frame_rate
12    	 0000					.extern _cl_wavread_getnchannels
13    	 0000					.extern _cl_wavread_number_of_frames
14    	 0000					.extern _cl_wavread_open
15    	 0000					.extern _cl_wavread_recvsample
16    	 0000					.extern _cl_wavwrite_close
17    	 0000					.extern _cl_wavwrite_open
18    	 0000					.extern _cl_wavwrite_sendsample
19    	 0000					.public _lfo
20    	 0000					.public _main
21    	 0000					.extern _memset
22    	 0000					.extern _printf
23    	 0000					.public _processing_foo
24    	 0000					.extern _strcpy
25    	 0000					.public _tremolo_init
26    	 0000					.public _tremolo_procces
27    	 0000					.extern __mul_sat_laccum
28    	 0000					.extern __div
29    							.xdata_ovly
29     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
30    	 0000				__extractedConst_0_8
31    	 0000					.dw  (0x7fffffff)
	 0000	 7FFFFFFF	 
32    							.xdata_ovly
32     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
33    	 0000				__extractedConst_1_2
34    	 0000					.dw  (0x0)
	 0000	 00000000	 
35    	 0001					.dw  (0x3d70a3d7)
	 0001	 3D70A3D7	 
36    	 0002					.dw  (0xa3d70a4)
	 0002	 0A3D70A4	 
37    							.xdata_ovly
37     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
38    	 0000				__extractedConst_2_2
39    	 0000					.dw  (0x0)
	 0000	 00000000	 
40    	 0001					.dw  (0x7d70a3d7)
	 0001	 7D70A3D7	 
41    	 0002					.dw  (0xa3d70a4)
	 0002	 0A3D70A4	 
42    							.xdata_ovly
42     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
43    	 0000				__extractedConst_3_1
44    	 0000					.dw  (0x50a3d70a)
	 0000	 50A3D70A	 
45    							.xdata_ovly
45     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
46    	 0000				_inputGain
47    	 0000					.bss (0x1)
48    							.xdata_ovly
48     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
49    	 0000				_outputChannelNum
50    	 0000					.bss (0x1)
51    							.ydata_ovly
51     >> start of macro: .ydata_ovly
1+    									seg_single , "Y_OVLY", Y
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_Y_ )
2+    						    segment
3+    						  .else
4+    						    segment "Y_OVLY"
5+    							.if "" != ""
6+    						___SegStart_Y_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .ydata_ovly
52    	 0000				_sampleBuffer
53    	 0000					.bss (0x80)
54    							.xdata_ovly
54     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
55    	 0000				_sampleBufferLeft
56    	 0000					.dw _sampleBuffer
	 0000	 00000000	 
57    							.xdata_ovly
57     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
58    	 0000				_sampleBufferLeftSide
59    	 0000					.dw _sampleBuffer+32
	 0000	 00000020	 
60    							.xdata_ovly
60     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
61    	 0000				_sampleBufferRight
62    	 0000					.dw _sampleBuffer+16
	 0000	 00000010	 
63    							.xdata_ovly
63     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
64    	 0000				_sampleBufferRightSide
65    	 0000					.dw _sampleBuffer+48
	 0000	 00000030	 
66    							.xdata_ovly
66     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
67    	 0000				_string_const_0
68    	 0000					.dw  (0x45)
	 0000	 00000045	 
69    	 0001					.dw  (0x72)
	 0001	 00000072	 
70    	 0002					.dw  (0x72)
	 0002	 00000072	 
71    	 0003					.dw  (0x6f)
	 0003	 0000006F	 
72    	 0004					.dw  (0x72)
	 0004	 00000072	 
73    	 0005					.dw  (0x3a)
	 0005	 0000003A	 
74    	 0006					.dw  (0x20)
	 0006	 00000020	 
75    	 0007					.dw  (0x43)
	 0007	 00000043	 
76    	 0008					.dw  (0x6f)
	 0008	 0000006F	 
77    	 0009					.dw  (0x75)
	 0009	 00000075	 
78    	 000A					.dw  (0x6c)
	 000A	 0000006C	 
79    	 000B					.dw  (0x64)
	 000B	 00000064	 
80    	 000C					.dw  (0x20)
	 000C	 00000020	 
81    	 000D					.dw  (0x6e)
	 000D	 0000006E	 
82    	 000E					.dw  (0x6f)
	 000E	 0000006F	 
83    	 000F					.dw  (0x74)
	 000F	 00000074	 
84    	 0010					.dw  (0x20)
	 0010	 00000020	 
85    	 0011					.dw  (0x6f)
	 0011	 0000006F	 
86    	 0012					.dw  (0x70)
	 0012	 00000070	 
87    	 0013					.dw  (0x65)
	 0013	 00000065	 
88    	 0014					.dw  (0x6e)
	 0014	 0000006E	 
89    	 0015					.dw  (0x20)
	 0015	 00000020	 
90    	 0016					.dw  (0x77)
	 0016	 00000077	 
91    	 0017					.dw  (0x61)
	 0017	 00000061	 
92    	 0018					.dw  (0x76)
	 0018	 00000076	 
93    	 0019					.dw  (0x65)
	 0019	 00000065	 
94    	 001A					.dw  (0x66)
	 001A	 00000066	 
95    	 001B					.dw  (0x69)
	 001B	 00000069	 
96    	 001C					.dw  (0x6c)
	 001C	 0000006C	 
97    	 001D					.dw  (0x65)
	 001D	 00000065	 
98    	 001E					.dw  (0x2e)
	 001E	 0000002E	 
99    	 001F					.dw  (0xa)
	 001F	 0000000A	 
100   	 0020					.dw  (0x0)
	 0020	 00000000	 
101   							.xdata_ovly
101    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
102   	 0000				_string_const_1
103   	 0000					.dw  (0x45)
	 0000	 00000045	 
104   	 0001					.dw  (0x72)
	 0001	 00000072	 
105   	 0002					.dw  (0x72)
	 0002	 00000072	 
106   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
107   	 0004					.dw  (0x72)
	 0004	 00000072	 
108   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
109   	 0006					.dw  (0x20)
	 0006	 00000020	 
110   	 0007					.dw  (0x43)
	 0007	 00000043	 
111   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
112   	 0009					.dw  (0x75)
	 0009	 00000075	 
113   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
114   	 000B					.dw  (0x64)
	 000B	 00000064	 
115   	 000C					.dw  (0x20)
	 000C	 00000020	 
116   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
117   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
118   	 000F					.dw  (0x74)
	 000F	 00000074	 
119   	 0010					.dw  (0x20)
	 0010	 00000020	 
120   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
121   	 0012					.dw  (0x70)
	 0012	 00000070	 
122   	 0013					.dw  (0x65)
	 0013	 00000065	 
123   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
124   	 0015					.dw  (0x20)
	 0015	 00000020	 
125   	 0016					.dw  (0x77)
	 0016	 00000077	 
126   	 0017					.dw  (0x61)
	 0017	 00000061	 
127   	 0018					.dw  (0x76)
	 0018	 00000076	 
128   	 0019					.dw  (0x65)
	 0019	 00000065	 
129   	 001A					.dw  (0x66)
	 001A	 00000066	 
130   	 001B					.dw  (0x69)
	 001B	 00000069	 
131   	 001C					.dw  (0x6c)
	 001C	 0000006C	 
132   	 001D					.dw  (0x65)
	 001D	 00000065	 
133   	 001E					.dw  (0x2e)
	 001E	 0000002E	 
134   	 001F					.dw  (0xa)
	 001F	 0000000A	 
135   	 0020					.dw  (0x0)
	 0020	 00000000	 
136   							.xdata_ovly
136    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
137   	 0000				_tremolo_data
138   	 0000					.bss (0x8)
139   							.code_ovly
139    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
140   						
141   						
142   						
143   	 0000				_lfo:			/* LN: 151 | CYCLE: 0 | RULES: () */ 
144   	 0000	 BB540007		xmem[i7] = i7			# LN: 151 | 
145   	 0001	 020F7FFF		i7 += 1			# LN: 151 | 
146   	 0002	 87750003		i7 = i7 + (0x3)			# LN: 151 | 
147   	 0003	 90750003		i0 = i7 - (0x3)			# LN: 151 | 
148   	 0004	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 151, 151 | 
149   	 0005	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 151, 151 | 
150   	 0006	 90540000		xmem[i0] = a0l			# LN: 151 | 
151   	 0007				cline_151_0:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
152   	 0007	 88040003		a0 = xmem[_tremolo_data + 3]			# LN: 153 | 
153   	 0008	 894A0002		uhalfword(a1) = (0x2)			# LN: 153 | 
154   	 0009	 00004F08		a0 - a1			# LN: 153 | 
155   	 000A	 8448003A		if (a != 0) jmp (else_1)			# LN: 153 | 
156   	 000B				cline_153_0:			/* LN: 155 | CYCLE: 0 | RULES: () */ 
157   	 000B	 90750003		i0 = i7 - (0x3)			# LN: 155 | 
158   	 000C	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 155, 155 | 
159   	 000D	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 155, 155 | 
160   	 000E	 90140000		a0l = xmem[i0]			# LN: 155 | 
161   	 000F	 00004E40		a0 = a0 >> 1			# LN: 155 | 
162   	 0010	 895A2000		ufixed16(a1) = (0x2000)			# LN: 155 | 
163   	 0011	 00004E41		a1 = a1 >> 1			# LN: 155 | 
164   	 0012	 00004F08		a0 - a1			# LN: 155 | 
165   	 0013	 84C8001D		if (a >= 0) jmp (else_2)			# LN: 155 | 
166   	 0014				cline_155_0:			/* LN: 157 | CYCLE: 0 | RULES: () */ 
167   	 0014	 90750003		i0 = i7 - (0x3)			# LN: 157 | 
168   	 0015	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 157, 157 | 
169   	 0016	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 157, 157 | 
170   	 0017	 90140000		a0l = xmem[i0]			# LN: 157 | 
171   	 0018	 00004E00		a0 = a0 << 1			# LN: 157 | 
172   	 0019	 895A4000		ufixed16(a1) = (0x4000)			# LN: 157 | 
173   	 001A	 00004480		a0 = a1 + a0			# LN: 157 | 
174   	 001B	 48487FFF		a0 = a0			# LN: 157 | 
175   	 001C	 80080093		jmp (__epilogue_224)			# LN: 157 | 
176   	 001D				cline_157_0:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
177   	 001D				else_2:			/* LN: 155 | CYCLE: 0 | RULES: () */ 
178   	 001D	 90750003		i0 = i7 - (0x3)			# LN: 159 | 
179   	 001E	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 159, 159 | 
180   	 001F	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 159, 159 | 
181   	 0020	 90140000		a0l = xmem[i0]			# LN: 159 | 
182   	 0021	 00004E40		a0 = a0 >> 1			# LN: 159 | 
183   	 0022	 895A6000		ufixed16(a1) = (0x6000)			# LN: 159 | 
184   	 0023	 00004E41		a1 = a1 >> 1			# LN: 159 | 
185   	 0024	 00004F08		a0 - a1			# LN: 159 | 
186   	 0025	 84C80031		if (a >= 0) jmp (else_3)			# LN: 159 | 
187   	 0026				cline_159_0:			/* LN: 161 | CYCLE: 0 | RULES: () */ 
188   	 0026	 90750003		i0 = i7 - (0x3)			# LN: 161 | 
189   	 0027	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 161, 161 | 
190   	 0028	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 161, 161 | 
191   	 0029	 90140000		a0l = xmem[i0]			# LN: 161 | 
192   	 002A	 895A2000		ufixed16(a1) = (0x2000)			# LN: 161 | 
193   	 002B	 00004448		a0 = a0 - a1			# LN: 161 | 
194   	 002C	 00004E00		a0 = a0 << 1			# LN: 161 | 
195   	 002D	 895A8000		ufixed16(a1) = (0x8000)			# LN: 161 | 
196   	 002E	 000044C0		a0 = a1 - a0			# LN: 161 | 
197   	 002F	 48487FFF		a0 = a0			# LN: 161 | 
198   	 0030	 80080093		jmp (__epilogue_224)			# LN: 161 | 
199   	 0031				cline_161_0:			/* LN: 165 | CYCLE: 0 | RULES: () */ 
200   	 0031				else_3:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
201   	 0031	 90750003		i0 = i7 - (0x3)			# LN: 165 | 
202   	 0032	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 165, 165 | 
203   	 0033	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 165, 165 | 
204   	 0034	 90140000		a0l = xmem[i0]			# LN: 165 | 
205   	 0035	 895A6000		ufixed16(a1) = (0x6000)			# LN: 165 | 
206   	 0036	 00004448		a0 = a0 - a1			# LN: 165 | 
207   	 0037	 00004E00		a0 = a0 << 1			# LN: 165 | 
208   	 0038	 48487FFF		a0 = a0			# LN: 165 | 
209   	 0039	 80080093		jmp (__epilogue_224)			# LN: 165 | 
210   	 003A				cline_155_1:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
211   	 003A				else_1:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
212   	 003A	 88040003		a0 = xmem[_tremolo_data + 3]			# LN: 168 | 
213   	 003B	 894A0003		uhalfword(a1) = (0x3)			# LN: 168 | 
214   	 003C	 00004F08		a0 - a1			# LN: 168 | 
215   	 003D	 8448004C		if (a != 0) jmp (else_4)			# LN: 168 | 
216   	 003E				cline_168_0:			/* LN: 170 | CYCLE: 0 | RULES: () */ 
217   	 003E	 90750003		i0 = i7 - (0x3)			# LN: 170 | 
218   	 003F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 170, 170 | 
219   	 0040	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 170, 170 | 
220   	 0041	 90140000		a0l = xmem[i0]			# LN: 170 | 
221   	 0042	 00004C24		b0 =+ a0			# LN: 170 | 
222   	 0043	 00004E44		b0 = b0 >> 1			# LN: 170 | 
223   	 0044	 887A4000		a0 = (0x4000)			# LN: 170 | 
224   	 0045	 00004E40		a0 = a0 >> 1			# LN: 170 | 
225   	 0046	 00004F24		b0 - a0			# LN: 170 | 
226   	 0047	 86C8004A		if (b >= 0) jmp (else_5)			# LN: 170 | 
227   	 0048				cline_170_0:			/* LN: 172 | CYCLE: 0 | RULES: () */ 
228   	 0048	 88040000		a0 = xmem[__extractedConst_0_8 + 0]			# LN: 172 | 
229   	 0049	 80080093		jmp (__epilogue_224)			# LN: 172 | 
230   	 004A				cline_172_0:			/* LN: 176 | CYCLE: 0 | RULES: () */ 
231   	 004A				else_5:			/* LN: 170 | CYCLE: 0 | RULES: () */ 
232   	 004A	 00004DC0		a0 = 0			# LN: 176 | 
233   	 004B	 80080093		jmp (__epilogue_224)			# LN: 176 | 
234   	 004C				cline_170_1:			/* LN: 179 | CYCLE: 0 | RULES: () */ 
235   	 004C				else_4:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
236   	 004C	 88040003		a0 = xmem[_tremolo_data + 3]			# LN: 179 | 
237   	 004D	 894A0004		uhalfword(a1) = (0x4)			# LN: 179 | 
238   	 004E	 00004F08		a0 - a1			# LN: 179 | 
239   	 004F	 84480091		if (a != 0) jmp (else_6)			# LN: 179 | 
240   	 0050				cline_179_0:			/* LN: 181 | CYCLE: 0 | RULES: () */ 
241   	 0050	 90750003		i0 = i7 - (0x3)			# LN: 181 | 
242   	 0051	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 181, 181 | 
243   	 0052	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 181, 181 | 
244   	 0053	 90140000		a0l = xmem[i0]			# LN: 181 | 
245   	 0054	 00004C24		b0 =+ a0			# LN: 181 | 
246   	 0055	 A0040000		a0g = xmem[__extractedConst_1_2 + 0]			# LN: 181 | 
247   	 0056	 00004E44		b0 = b0 >> 1			# LN: 181 | 
248   	 0057	 98040001		a0h = xmem[__extractedConst_1_2 + 1]			# LN: 181 | 
249   	 0058	 90040002		a0l = xmem[__extractedConst_1_2 + 2]			# LN: 181 | 
250   	 0059	 00004E40		a0 = a0 >> 1			# LN: 181 | 
251   	 005A	 00004F24		b0 - a0			# LN: 181 | 
252   	 005B	 86C8005E		if (b >= 0) jmp (else_7)			# LN: 181 | 
253   	 005C				cline_181_0:			/* LN: 183 | CYCLE: 0 | RULES: () */ 
254   	 005C	 88040000		a0 = xmem[__extractedConst_0_8 + 0]			# LN: 183 | 
255   	 005D	 80080093		jmp (__epilogue_224)			# LN: 183 | 
256   	 005E				cline_183_0:			/* LN: 185 | CYCLE: 0 | RULES: () */ 
257   	 005E				else_7:			/* LN: 181 | CYCLE: 0 | RULES: () */ 
258   	 005E	 90750003		i0 = i7 - (0x3)			# LN: 185 | 
259   	 005F	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 185, 185 | 
260   	 0060	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 185, 185 | 
261   	 0061	 90140000		a0l = xmem[i0]			# LN: 185 | 
262   	 0062	 00004E40		a0 = a0 >> 1			# LN: 185 | 
263   	 0063	 895A4000		ufixed16(a1) = (0x4000)			# LN: 185 | 
264   	 0064	 00004E41		a1 = a1 >> 1			# LN: 185 | 
265   	 0065	 00004F08		a0 - a1			# LN: 185 | 
266   	 0066	 84C80076		if (a >= 0) jmp (else_8)			# LN: 185 | 
267   	 0067				cline_185_0:			/* LN: 187 | CYCLE: 0 | RULES: () */ 
268   	 0067	 90750003		i0 = i7 - (0x3)			# LN: 187 | 
269   	 0068	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 187, 187 | 
270   	 0069	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 187, 187 | 
271   	 006A	 90140000		a0l = xmem[i0]			# LN: 187 | 
272   	 006B	 A1040000		a1g = xmem[__extractedConst_1_2 + 0]			# LN: 187 | 
273   	 006C	 99040001		a1h = xmem[__extractedConst_1_2 + 1]			# LN: 187 | 
274   	 006D	 91040002		a1l = xmem[__extractedConst_1_2 + 2]			# LN: 187 | 
275   	 006E	 00004449		a1 = a0 - a1			# LN: 187 | 
276   	 006F	 00004DC0		a0 = 0			# LN: 187 | 
277   	 0070	 A04A0019		a0g = (0x19)			# LN: 187 | 
278   	 0071	 80880000		call (__mul_sat_laccum)			# LN: 187 | 
279   	 0072	 89040000		a1 = xmem[__extractedConst_0_8 + 0]			# LN: 187 | 
280   	 0073	 000044C0		a0 = a1 - a0			# LN: 187 | 
281   	 0074	 48487FFF		a0 = a0			# LN: 187 | 
282   	 0075	 80080093		jmp (__epilogue_224)			# LN: 187 | 
283   	 0076				cline_187_0:			/* LN: 189 | CYCLE: 0 | RULES: () */ 
284   	 0076				else_8:			/* LN: 185 | CYCLE: 0 | RULES: () */ 
285   	 0076	 90750003		i0 = i7 - (0x3)			# LN: 189 | 
286   	 0077	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 189, 189 | 
287   	 0078	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 189, 189 | 
288   	 0079	 90140000		a0l = xmem[i0]			# LN: 189 | 
289   	 007A	 00004C24		b0 =+ a0			# LN: 189 | 
290   	 007B	 A0040000		a0g = xmem[__extractedConst_2_2 + 0]			# LN: 189 | 
291   	 007C	 00004E44		b0 = b0 >> 1			# LN: 189 | 
292   	 007D	 98040001		a0h = xmem[__extractedConst_2_2 + 1]			# LN: 189 | 
293   	 007E	 90040002		a0l = xmem[__extractedConst_2_2 + 2]			# LN: 189 | 
294   	 007F	 00004E40		a0 = a0 >> 1			# LN: 189 | 
295   	 0080	 00004F24		b0 - a0			# LN: 189 | 
296   	 0081	 86C80084		if (b >= 0) jmp (else_9)			# LN: 189 | 
297   	 0082				cline_189_0:			/* LN: 191 | CYCLE: 0 | RULES: () */ 
298   	 0082	 00004DC0		a0 = 0			# LN: 191 | 
299   	 0083	 80080093		jmp (__epilogue_224)			# LN: 191 | 
300   	 0084				cline_191_0:			/* LN: 195 | CYCLE: 0 | RULES: () */ 
301   	 0084				else_9:			/* LN: 189 | CYCLE: 0 | RULES: () */ 
302   	 0084	 90750003		i0 = i7 - (0x3)			# LN: 195 | 
303   	 0085	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 195, 195 | 
304   	 0086	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 195, 195 | 
305   	 0087	 90140000		a0l = xmem[i0]			# LN: 195 | 
306   	 0088	 A1040000		a1g = xmem[__extractedConst_2_2 + 0]			# LN: 195 | 
307   	 0089	 99040001		a1h = xmem[__extractedConst_2_2 + 1]			# LN: 195 | 
308   	 008A	 91040002		a1l = xmem[__extractedConst_2_2 + 2]			# LN: 195 | 
309   	 008B	 00004449		a1 = a0 - a1			# LN: 195 | 
310   	 008C	 00004DC0		a0 = 0			# LN: 195 | 
311   	 008D	 A04A0019		a0g = (0x19)			# LN: 195 | 
312   	 008E	 80880000		call (__mul_sat_laccum)			# LN: 195 | 
313   	 008F	 48487FFF		a0 = a0			# LN: 195 | 
314   	 0090	 80080093		jmp (__epilogue_224)			# LN: 195 | 
315   	 0091				cline_181_1:			/* LN: 200 | CYCLE: 0 | RULES: () */ 
316   	 0091				else_6:			/* LN: 179 | CYCLE: 0 | RULES: () */ 
317   	 0091	 887A4000		a0 = (0x4000)			# LN: 200 | 
318   	 0092	 80080093		jmp (__epilogue_224)			# LN: 200 | 
319   	 0093				cline_200_0:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
320   	 0093				__epilogue_224:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
321   	 0093	 97750003		i7 = i7 - (0x3)			# LN: 202 | 
322   	 0094	 02177FFF		i7 -= 1			# LN: 202 | 
323   	 0095	 81880000		ret			# LN: 202 | 
324   						
325   						
326   						
327   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
328   							.if defined(_OVLY_)
329   								.if .strcmp('standalone',_OVLY_)=0
330   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
331   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
332   	 0000				dummy		.equ(__start)
333   								.else
334   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
335   						dummy		.equ(__intvec)
336   								.endif
337   								.endif
338   							.endif
339   						
340   	 0096				_main:			/* LN: 259 | CYCLE: 0 | RULES: () */ 
341   	 0096	 BB540007		xmem[i7] = i7			# LN: 259 | 
342   	 0097	 020F7FFF		i7 += 1			# LN: 259 | 
343   	 0098	 8775020E		i7 = i7 + (0x20e)			# LN: 259 | 
344   	 0099	 91750001		i1 = i7 - (0x1)			# LN: 259 | 
345   	 009A	 98540001		xmem[i1] = a0h			# LN: 259 | 
346   	 009B	 91750002		i1 = i7 - (0x2)			# LN: 259 | 
347   	 009C	 B0540001		xmem[i1] = i0			# LN: 259 | 
348   	 009D				cline_259_0:			/* LN: 268 | CYCLE: 0 | RULES: () */ 
349   	 009D	 90750003		i0 = i7 - (0x3)			# LN: 268 | 
350   	 009E	 884A0004		uhalfword(a0) = (0x4)			# LN: 268 | 
351   	 009F	 98540000		xmem[i0] = a0h			# LN: 268 | 
352   	 00A0				cline_268_0:			/* LN: 275 | CYCLE: 0 | RULES: () */ 
353   	 00A0	 90750004		i0 = i7 - (0x4)			# LN: 275 | 
354   	 00A1	 00004DC0		a0 = 0			# LN: 275 | 
355   	 00A2	 98540000		xmem[i0] = a0h			# LN: 275 | 
356   	 00A3	 808000B0		do (0x8), label_end_92			# LN: 275 | 
357   	 00A4				cline_275_0:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
358   	 00A4				label_begin_92:			/* LN: 275 | CYCLE: 0 | RULES: () */ 
359   	 00A4	 90750004		i0 = i7 - (0x4)			# LN: 276 | 
360   	 00A5	 19404DC0		a1 = xmem[i0]; a0 = 0			# LN: 276, 276 | 
361   	 00A6	 00004EC1		a1 = a1 << 4			# LN: 276 | 
362   	 00A7	 49707FFF		i0 = a1			# LN: 276 | 
363   	 00A8	 894A0010		uhalfword(a1) = (0x10)			# LN: 276 | 
364   	 00A9	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 276 | 
365   	 00AA	 80880000		call (_memset)			# LN: 276 | 
366   	 00AB				cline_276_0:			/* LN: 275 | CYCLE: 0 | RULES: () */ 
367   	 00AB				init_latch_label_2:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
368   	 00AB	 90750004		i0 = i7 - (0x4)			# LN: 275 | 
369   	 00AC	 88140000		a0 = xmem[i0]			# LN: 275 | 
370   	 00AD	 894A0001		uhalfword(a1) = (0x1)			# LN: 275 | 
371   	 00AE	 00004408		a0 = a0 + a1			# LN: 275 | 
372   	 00AF	 90750004		i0 = i7 - (0x4)			# LN: 275 | 
373   	 00B0				label_end_92:			# LN: 275 | CYCLE: 5 | RULES: ()
374   	 00B0	 98540000		xmem[i0] = a0h			# LN: 275 | 
375   	 00B1				cline_275_1:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
376   	 00B1				for_end_2:			/* LN: 275 | CYCLE: 0 | RULES: () */ 
377   	 00B1	 90750002		i0 = i7 - (0x2)			# LN: 280 | 
378   	 00B2	 B0140000		i0 = xmem[i0]			# LN: 280 | 
379   	 00B3	 91750104		i1 = i7 - (260 - 0)			# LN: 280 | 
380   	 00B4	 B8140000		i4 = xmem[i0]			# LN: 280 | 
381   	 00B5	 B1090030		i0 = i1			# LN: 280 | 
382   	 00B6	 B8090031		i1 = i4			# LN: 280 | 
383   	 00B7	 80880000		call (_strcpy)			# LN: 280 | 
384   	 00B8				cline_280_0:			/* LN: 281 | CYCLE: 0 | RULES: () */ 
385   	 00B8	 90750104		i0 = i7 - (260 - 0)			# LN: 281 | 
386   	 00B9	 80880000		call (_cl_wavread_open)			# LN: 281 | 
387   	 00BA	 98090030		AnyReg(i0, a0h)			# LN: 281 | 
388   	 00BB	 91750105		i1 = i7 - (0x105)			# LN: 281 | 
389   	 00BC	 B0540001		xmem[i1] = i0			# LN: 281 | 
390   	 00BD				cline_281_0:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
391   	 00BD	 90750105		i0 = i7 - (0x105)			# LN: 282 | 
392   	 00BE	 88140000		a0 = xmem[i0]			# LN: 282 | 
393   	 00BF	 00004E80		a0 & a0			# LN: 282 | 
394   	 00C0	 844800C5		if (a != 0) jmp (else_11)			# LN: 282 | 
395   	 00C1				cline_282_0:			/* LN: 284 | CYCLE: 0 | RULES: () */ 
396   	 00C1	 A0050000		i0 = (0) + (_string_const_0)			# LN: 284 | 
397   	 00C2	 80880000		call (_printf)			# LN: 284 | 
398   	 00C3				cline_284_0:			/* LN: 285 | CYCLE: 0 | RULES: () */ 
399   	 00C3	 886AFFFF		halfword(a0) = (0xffff)			# LN: 285 | 
400   	 00C4	 80080168		jmp (__epilogue_228)			# LN: 285 | 
401   	 00C5				cline_285_0:			/* LN: 291 | CYCLE: 0 | RULES: () */ 
402   	 00C5				endif_11:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
403   	 00C5				else_11:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
404   	 00C5	 90750105		i0 = i7 - (0x105)			# LN: 291 | 
405   	 00C6	 B0140000		i0 = xmem[i0]			# LN: 291 | 
406   	 00C7	 80880000		call (_cl_wavread_getnchannels)			# LN: 291 | 
407   	 00C8	 90750106		i0 = i7 - (0x106)			# LN: 291 | 
408   	 00C9	 98540000		xmem[i0] = a0h			# LN: 291 | 
409   	 00CA				cline_291_0:			/* LN: 292 | CYCLE: 0 | RULES: () */ 
410   	 00CA	 90750105		i0 = i7 - (0x105)			# LN: 292 | 
411   	 00CB	 B0140000		i0 = xmem[i0]			# LN: 292 | 
412   	 00CC	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 292 | 
413   	 00CD	 90750107		i0 = i7 - (0x107)			# LN: 292 | 
414   	 00CE	 98540000		xmem[i0] = a0h			# LN: 292 | 
415   	 00CF				cline_292_0:			/* LN: 293 | CYCLE: 0 | RULES: () */ 
416   	 00CF	 90750105		i0 = i7 - (0x105)			# LN: 293 | 
417   	 00D0	 B0140000		i0 = xmem[i0]			# LN: 293 | 
418   	 00D1	 80880000		call (_cl_wavread_frame_rate)			# LN: 293 | 
419   	 00D2	 90750108		i0 = i7 - (0x108)			# LN: 293 | 
420   	 00D3	 98540000		xmem[i0] = a0h			# LN: 293 | 
421   	 00D4				cline_293_0:			/* LN: 294 | CYCLE: 0 | RULES: () */ 
422   	 00D4	 90750105		i0 = i7 - (0x105)			# LN: 294 | 
423   	 00D5	 B0140000		i0 = xmem[i0]			# LN: 294 | 
424   	 00D6	 80880000		call (_cl_wavread_number_of_frames)			# LN: 294 | 
425   	 00D7	 90750109		i0 = i7 - (0x109)			# LN: 294 | 
426   	 00D8	 98540000		xmem[i0] = a0h			# LN: 294 | 
427   	 00D9				cline_294_0:			/* LN: 299 | CYCLE: 0 | RULES: () */ 
428   	 00D9	 90750002		i0 = i7 - (0x2)			# LN: 299 | 
429   	 00DA	 B0140000		i0 = xmem[i0]			# LN: 299 | 
430   	 00DB	 91750209		i1 = i7 - (521 - 0)			# LN: 299 | 
431   	 00DC	 02087FFF		i0 += 1			# LN: 299 | 
432   	 00DD	 B8140000		i4 = xmem[i0]			# LN: 299 | 
433   	 00DE	 B1090030		i0 = i1			# LN: 299 | 
434   	 00DF	 B8090031		i1 = i4			# LN: 299 | 
435   	 00E0	 80880000		call (_strcpy)			# LN: 299 | 
436   	 00E1				cline_299_0:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
437   	 00E1	 90750209		i0 = i7 - (521 - 0)			# LN: 300 | 
438   	 00E2	 91750107		i1 = i7 - (0x107)			# LN: 300 | 
439   	 00E3	 88140001		a0 = xmem[i1]			# LN: 300 | 
440   	 00E4	 91750003		i1 = i7 - (0x3)			# LN: 300 | 
441   	 00E5	 89140001		a1 = xmem[i1]			# LN: 300 | 
442   	 00E6	 91750108		i1 = i7 - (0x108)			# LN: 300 | 
443   	 00E7	 8C140001		b0 = xmem[i1]			# LN: 300 | 
444   	 00E8	 80880000		call (_cl_wavwrite_open)			# LN: 300 | 
445   	 00E9	 98090030		AnyReg(i0, a0h)			# LN: 300 | 
446   	 00EA	 9175020A		i1 = i7 - (0x20a)			# LN: 300 | 
447   	 00EB	 B0540001		xmem[i1] = i0			# LN: 300 | 
448   	 00EC				cline_300_0:			/* LN: 301 | CYCLE: 0 | RULES: () */ 
449   	 00EC	 9075020A		i0 = i7 - (0x20a)			# LN: 301 | 
450   	 00ED	 88140000		a0 = xmem[i0]			# LN: 301 | 
451   	 00EE	 00004E80		a0 & a0			# LN: 301 | 
452   	 00EF	 844800F4		if (a != 0) jmp (else_12)			# LN: 301 | 
453   	 00F0				cline_301_0:			/* LN: 303 | CYCLE: 0 | RULES: () */ 
454   	 00F0	 A0050000		i0 = (0) + (_string_const_1)			# LN: 303 | 
455   	 00F1	 80880000		call (_printf)			# LN: 303 | 
456   	 00F2				cline_303_0:			/* LN: 304 | CYCLE: 0 | RULES: () */ 
457   	 00F2	 886AFFFF		halfword(a0) = (0xffff)			# LN: 304 | 
458   	 00F3	 80080168		jmp (__epilogue_228)			# LN: 304 | 
459   	 00F4				cline_304_0:			/* LN: 307 | CYCLE: 0 | RULES: () */ 
460   	 00F4				endif_12:			/* LN: 301 | CYCLE: 0 | RULES: () */ 
461   	 00F4				else_12:			/* LN: 301 | CYCLE: 0 | RULES: () */ 
462   	 00F4	 808801B7		call (_tremolo_init)			# LN: 307 | 
463   	 00F5				cline_307_0:			/* LN: 318 | CYCLE: 0 | RULES: () */ 
464   	 00F5	 9075020B		i0 = i7 - (0x20b)			# LN: 318 | 
465   	 00F6	 00004DC0		a0 = 0			# LN: 318 | 
466   	 00F7	 98540000		xmem[i0] = a0h			# LN: 318 | 
467   	 00F8				for_3:			/* LN: 318 | CYCLE: 0 | RULES: () */ 
468   	 00F8	 90750109		i0 = i7 - (0x109)			# LN: 318 | 
469   	 00F9	 88140000		a0 = xmem[i0]			# LN: 318 | 
470   	 00FA	 894A0010		uhalfword(a1) = (0x10)			# LN: 318 | 
471   	 00FB	 80880000		call (__div)			# LN: 318 | 
472   	 00FC	 9075020B		i0 = i7 - (0x20b)			# LN: 318 | 
473   	 00FD	 89140000		a1 = xmem[i0]			# LN: 318 | 
474   	 00FE	 00004F01		a1 - a0			# LN: 318 | 
475   	 00FF	 84C80160		if (a >= 0) jmp (for_end_3)			# LN: 318 | 
476   	 0100				cline_318_0:			/* LN: 320 | CYCLE: 0 | RULES: () */ 
477   	 0100	 9075020C		i0 = i7 - (0x20c)			# LN: 320 | 
478   	 0101	 00004DC0		a0 = 0			# LN: 320 | 
479   	 0102	 98540000		xmem[i0] = a0h			# LN: 320 | 
480   	 0103	 8100012B		do (0x10), label_end_93			# LN: 320 | 
481   	 0104				cline_320_0:			/* LN: 322 | CYCLE: 0 | RULES: () */ 
482   	 0104				label_begin_93:			/* LN: 320 | CYCLE: 0 | RULES: () */ 
483   	 0104	 9075020D		i0 = i7 - (0x20d)			# LN: 322 | 
484   	 0105	 00004DC0		a0 = 0			# LN: 322 | 
485   	 0106	 98540000		xmem[i0] = a0h			# LN: 322 | 
486   	 0107				for_5:			/* LN: 322 | CYCLE: 0 | RULES: () */ 
487   	 0107	 9075020D		i0 = i7 - (0x20d)			# LN: 322 | 
488   	 0108	 88140000		a0 = xmem[i0]			# LN: 322 | 
489   	 0109	 90750106		i0 = i7 - (0x106)			# LN: 322 | 
490   	 010A	 89140000		a1 = xmem[i0]			# LN: 322 | 
491   	 010B	 00004F08		a0 - a1			# LN: 322 | 
492   	 010C	 84C80126		if (a >= 0) jmp (for_end_5)			# LN: 322 | 
493   	 010D				cline_322_0:			/* LN: 324 | CYCLE: 0 | RULES: () */ 
494   	 010D	 90750105		i0 = i7 - (0x105)			# LN: 324 | 
495   	 010E	 B0140000		i0 = xmem[i0]			# LN: 324 | 
496   	 010F	 80880000		call (_cl_wavread_recvsample)			# LN: 324 | 
497   	 0110	 9075020E		i0 = i7 - (0x20e)			# LN: 324 | 
498   	 0111	 98540000		xmem[i0] = a0h			# LN: 324 | 
499   	 0112				cline_324_0:			/* LN: 325 | CYCLE: 0 | RULES: () */ 
500   	 0112	 9075020D		i0 = i7 - (0x20d)			# LN: 325 | 
501   	 0113	 88140000		a0 = xmem[i0]			# LN: 325 | 
502   	 0114	 00004EC0		a0 = a0 << 4			# LN: 325 | 
503   	 0115	 48707FFF		i0 = a0			# LN: 325 | 
504   	 0116	 9175020C		i1 = i7 - (0x20c)			# LN: 325 | 
505   	 0117	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 325 | 
506   	 0118	 88140001		a0 = xmem[i1]			# LN: 325 | 
507   	 0119	 09707FFF		a1 = i0			# LN: 325 | 
508   	 011A	 00004480		a0 = a1 + a0			# LN: 325 | 
509   	 011B	 98090030		AnyReg(i0, a0h)			# LN: 325 | 
510   	 011C	 9175020E		i1 = i7 - (0x20e)			# LN: 325 | 
511   	 011D	 88140001		a0 = xmem[i1]			# LN: 325 | 
512   	 011E	 98D40000		ymem[i0] = a0h			# LN: 325 | 
513   	 011F				cline_325_0:			/* LN: 322 | CYCLE: 0 | RULES: () */ 
514   	 011F				init_latch_label_3:			/* LN: 326 | CYCLE: 0 | RULES: () */ 
515   	 011F	 9075020D		i0 = i7 - (0x20d)			# LN: 322 | 
516   	 0120	 88140000		a0 = xmem[i0]			# LN: 322 | 
517   	 0121	 894A0001		uhalfword(a1) = (0x1)			# LN: 322 | 
518   	 0122	 00004408		a0 = a0 + a1			# LN: 322 | 
519   	 0123	 9075020D		i0 = i7 - (0x20d)			# LN: 322 | 
520   	 0124	 98540000		xmem[i0] = a0h			# LN: 322 | 
521   	 0125	 80080107		jmp (for_5)			# LN: 322 | 
522   	 0126				cline_322_1:			/* LN: 320 | CYCLE: 0 | RULES: () */ 
523   	 0126				init_latch_label_4:			/* LN: 327 | CYCLE: 0 | RULES: () */ 
524   	 0126				for_end_5:			/* LN: 322 | CYCLE: 0 | RULES: () */ 
525   	 0126	 9075020C		i0 = i7 - (0x20c)			# LN: 320 | 
526   	 0127	 88140000		a0 = xmem[i0]			# LN: 320 | 
527   	 0128	 894A0001		uhalfword(a1) = (0x1)			# LN: 320 | 
528   	 0129	 00004408		a0 = a0 + a1			# LN: 320 | 
529   	 012A	 9075020C		i0 = i7 - (0x20c)			# LN: 320 | 
530   	 012B				label_end_93:			# LN: 320 | CYCLE: 5 | RULES: ()
531   	 012B	 98540000		xmem[i0] = a0h			# LN: 320 | 
532   	 012C				cline_320_1:			/* LN: 329 | CYCLE: 0 | RULES: () */ 
533   	 012C				for_end_4:			/* LN: 320 | CYCLE: 0 | RULES: () */ 
534   	 012C	 8088016B		call (_processing_foo)			# LN: 329 | 
535   	 012D				cline_329_0:			/* LN: 331 | CYCLE: 0 | RULES: () */ 
536   	 012D	 9075020C		i0 = i7 - (0x20c)			# LN: 331 | 
537   	 012E	 00004DC0		a0 = 0			# LN: 331 | 
538   	 012F	 98540000		xmem[i0] = a0h			# LN: 331 | 
539   	 0130	 81000158		do (0x10), label_end_94			# LN: 331 | 
540   	 0131				cline_331_0:			/* LN: 333 | CYCLE: 0 | RULES: () */ 
541   	 0131				label_begin_94:			/* LN: 331 | CYCLE: 0 | RULES: () */ 
542   	 0131	 9075020D		i0 = i7 - (0x20d)			# LN: 333 | 
543   	 0132	 00004DC0		a0 = 0			# LN: 333 | 
544   	 0133	 98540000		xmem[i0] = a0h			# LN: 333 | 
545   	 0134				for_7:			/* LN: 333 | CYCLE: 0 | RULES: () */ 
546   	 0134	 9075020D		i0 = i7 - (0x20d)			# LN: 333 | 
547   	 0135	 88140000		a0 = xmem[i0]			# LN: 333 | 
548   	 0136	 90750003		i0 = i7 - (0x3)			# LN: 333 | 
549   	 0137	 89140000		a1 = xmem[i0]			# LN: 333 | 
550   	 0138	 00004F08		a0 - a1			# LN: 333 | 
551   	 0139	 84C80153		if (a >= 0) jmp (for_end_7)			# LN: 333 | 
552   	 013A				cline_333_0:			/* LN: 335 | CYCLE: 0 | RULES: () */ 
553   	 013A	 9075020D		i0 = i7 - (0x20d)			# LN: 335 | 
554   	 013B	 88140000		a0 = xmem[i0]			# LN: 335 | 
555   	 013C	 00004EC0		a0 = a0 << 4			# LN: 335 | 
556   	 013D	 48707FFF		i0 = a0			# LN: 335 | 
557   	 013E	 9175020C		i1 = i7 - (0x20c)			# LN: 335 | 
558   	 013F	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 335 | 
559   	 0140	 88140001		a0 = xmem[i1]			# LN: 335 | 
560   	 0141	 09707FFF		a1 = i0			# LN: 335 | 
561   	 0142	 00004480		a0 = a1 + a0			# LN: 335 | 
562   	 0143	 98090030		AnyReg(i0, a0h)			# LN: 335 | 
563   	 0144	 9175020E		i1 = i7 - (0x20e)			# LN: 335 | 
564   	 0145	 88940000		a0 = ymem[i0]			# LN: 335 | 
565   	 0146	 98540001		xmem[i1] = a0h			# LN: 335 | 
566   	 0147				cline_335_0:			/* LN: 336 | CYCLE: 0 | RULES: () */ 
567   	 0147	 9075020A		i0 = i7 - (0x20a)			# LN: 336 | 
568   	 0148	 9175020E		i1 = i7 - (0x20e)			# LN: 336 | 
569   	 0149	 88140001		a0 = xmem[i1]			# LN: 336 | 
570   	 014A	 B0140000		i0 = xmem[i0]			# LN: 336 | 
571   	 014B	 80880000		call (_cl_wavwrite_sendsample)			# LN: 336 | 
572   	 014C				cline_336_0:			/* LN: 333 | CYCLE: 0 | RULES: () */ 
573   	 014C				init_latch_label_5:			/* LN: 337 | CYCLE: 0 | RULES: () */ 
574   	 014C	 9075020D		i0 = i7 - (0x20d)			# LN: 333 | 
575   	 014D	 88140000		a0 = xmem[i0]			# LN: 333 | 
576   	 014E	 894A0001		uhalfword(a1) = (0x1)			# LN: 333 | 
577   	 014F	 00004408		a0 = a0 + a1			# LN: 333 | 
578   	 0150	 9075020D		i0 = i7 - (0x20d)			# LN: 333 | 
579   	 0151	 98540000		xmem[i0] = a0h			# LN: 333 | 
580   	 0152	 80080134		jmp (for_7)			# LN: 333 | 
581   	 0153				cline_333_1:			/* LN: 331 | CYCLE: 0 | RULES: () */ 
582   	 0153				init_latch_label_6:			/* LN: 338 | CYCLE: 0 | RULES: () */ 
583   	 0153				for_end_7:			/* LN: 333 | CYCLE: 0 | RULES: () */ 
584   	 0153	 9075020C		i0 = i7 - (0x20c)			# LN: 331 | 
585   	 0154	 88140000		a0 = xmem[i0]			# LN: 331 | 
586   	 0155	 894A0001		uhalfword(a1) = (0x1)			# LN: 331 | 
587   	 0156	 00004408		a0 = a0 + a1			# LN: 331 | 
588   	 0157	 9075020C		i0 = i7 - (0x20c)			# LN: 331 | 
589   	 0158				label_end_94:			# LN: 331 | CYCLE: 5 | RULES: ()
590   	 0158	 98540000		xmem[i0] = a0h			# LN: 331 | 
591   	 0159				cline_331_1:			/* LN: 318 | CYCLE: 0 | RULES: () */ 
592   	 0159				init_latch_label_7:			/* LN: 339 | CYCLE: 0 | RULES: () */ 
593   	 0159				for_end_6:			/* LN: 331 | CYCLE: 0 | RULES: () */ 
594   	 0159	 9075020B		i0 = i7 - (0x20b)			# LN: 318 | 
595   	 015A	 88140000		a0 = xmem[i0]			# LN: 318 | 
596   	 015B	 894A0001		uhalfword(a1) = (0x1)			# LN: 318 | 
597   	 015C	 00004408		a0 = a0 + a1			# LN: 318 | 
598   	 015D	 9075020B		i0 = i7 - (0x20b)			# LN: 318 | 
599   	 015E	 98540000		xmem[i0] = a0h			# LN: 318 | 
600   	 015F	 800800F8		jmp (for_3)			# LN: 318 | 
601   	 0160				cline_318_1:			/* LN: 344 | CYCLE: 0 | RULES: () */ 
602   	 0160				for_end_3:			/* LN: 318 | CYCLE: 0 | RULES: () */ 
603   	 0160	 90750105		i0 = i7 - (0x105)			# LN: 344 | 
604   	 0161	 B0140000		i0 = xmem[i0]			# LN: 344 | 
605   	 0162	 80880000		call (_cl_wavread_close)			# LN: 344 | 
606   	 0163				cline_344_0:			/* LN: 345 | CYCLE: 0 | RULES: () */ 
607   	 0163	 9075020A		i0 = i7 - (0x20a)			# LN: 345 | 
608   	 0164	 B0140000		i0 = xmem[i0]			# LN: 345 | 
609   	 0165	 80880000		call (_cl_wavwrite_close)			# LN: 345 | 
610   	 0166				cline_345_0:			/* LN: 348 | CYCLE: 0 | RULES: () */ 
611   	 0166	 00004DC0		a0 = 0			# LN: 348 | 
612   	 0167	 80080168		jmp (__epilogue_228)			# LN: 348 | 
613   	 0168				cline_348_0:			/* LN: 349 | CYCLE: 0 | RULES: () */ 
614   	 0168				__epilogue_228:			/* LN: 349 | CYCLE: 0 | RULES: () */ 
615   	 0168	 9775020E		i7 = i7 - (0x20e)			# LN: 349 | 
616   	 0169	 02177FFF		i7 -= 1			# LN: 349 | 
617   	 016A	 81880000		ret			# LN: 349 | 
618   						
619   						
620   						
621   	 016B				_processing_foo:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
622   	 016B	 BB540007		xmem[i7] = i7			# LN: 221 | 
623   	 016C	 020F7FFF		i7 += 1			# LN: 221 | 
624   	 016D	 87750005		i7 = i7 + (0x5)			# LN: 221 | 
625   	 016E				cline_221_0:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
626   	 016E	 90750001		i0 = i7 - (0x1)			# LN: 223 | 
627   	 016F	 884A0000		uhalfword(a0) = (_sampleBuffer + 0)			# LN: 223 | 
628   	 0170	 88540000		xmem[i0] = a0			# LN: 223 | 
629   	 0171				cline_223_0:			/* LN: 224 | CYCLE: 0 | RULES: () */ 
630   	 0171	 90750002		i0 = i7 - (0x2)			# LN: 224 | 
631   	 0172	 884A0010		uhalfword(a0) = (_sampleBuffer + 16)			# LN: 224 | 
632   	 0173	 88540000		xmem[i0] = a0			# LN: 224 | 
633   	 0174				cline_224_0:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
634   	 0174	 80080175		jmp (dummy_init_1)			# LN: 227 | 
635   	 0175				for_1:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
636   	 0175				dummy_init_1:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
637   	 0175	 B0040000		i0 = xmem[_sampleBufferLeft + 0]			# LN: 227 | 
638   	 0176	 91750001		i1 = i7 - (0x1)			# LN: 227 | 
639   	 0177	 80050010		i0 = i0 + (0x10)			# LN: 227 | 
640   	 0178	 02107FFF		i0 -= 1			# LN: 227 | 
641   	 0179	 88140001		a0 = xmem[i1]			# LN: 227 | 
642   	 017A	 09707FFF		a1 = i0			# LN: 227 | 
643   	 017B	 00004F08		a0 - a1			# LN: 227 | 
644   	 017C	 854801A8		if (a > 0) jmp (for_end_1)			# LN: 227 | 
645   	 017D				cline_227_0:			/* LN: 229 | CYCLE: 0 | RULES: () */ 
646   	 017D	 90750001		i0 = i7 - (0x1)			# LN: 229 | 
647   	 017E	 B0140000		i0 = xmem[i0]			# LN: 229 | 
648   	 017F	 80040000		x0 = xmem[_inputGain + 0]			# LN: 229 | 
649   	 0180	 81940000		x1 = ymem[i0]			# LN: 229 | 
650   	 0181	 00002020		a0 = x1 * x0			# LN: 229 | 
651   	 0182	 90750005		i0 = i7 - (0x5)			# LN: 229 | 
652   	 0183	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 229, 229 | 
653   	 0184	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 229, 229 | 
654   	 0185	 90540000		xmem[i0] = a0l			# LN: 229 | 
655   	 0186				cline_229_0:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
656   	 0186	 90750005		i0 = i7 - (0x5)			# LN: 230 | 
657   	 0187	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 230, 230 | 
658   	 0188	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 230, 230 | 
659   	 0189	 91750001		i1 = i7 - (0x1)			# LN: 230 | 
660   	 018A	 B1140001		i1 = xmem[i1]			# LN: 230 | 
661   	 018B	 90140000		a0l = xmem[i0]			# LN: 230 | 
662   	 018C	 88D40001		ymem[i1] = a0			# LN: 230 | 
663   	 018D				cline_230_0:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
664   	 018D	 90750002		i0 = i7 - (0x2)			# LN: 232 | 
665   	 018E	 B0140000		i0 = xmem[i0]			# LN: 232 | 
666   	 018F	 80040000		x0 = xmem[_inputGain + 0]			# LN: 232 | 
667   	 0190	 81940000		x1 = ymem[i0]			# LN: 232 | 
668   	 0191	 00002020		a0 = x1 * x0			# LN: 232 | 
669   	 0192	 90750005		i0 = i7 - (0x5)			# LN: 232 | 
670   	 0193	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 232, 232 | 
671   	 0194	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 232, 232 | 
672   	 0195	 90540000		xmem[i0] = a0l			# LN: 232 | 
673   	 0196				cline_232_0:			/* LN: 233 | CYCLE: 0 | RULES: () */ 
674   	 0196	 90750005		i0 = i7 - (0x5)			# LN: 233 | 
675   	 0197	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 233, 233 | 
676   	 0198	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 233, 233 | 
677   	 0199	 91750002		i1 = i7 - (0x2)			# LN: 233 | 
678   	 019A	 B1140001		i1 = xmem[i1]			# LN: 233 | 
679   	 019B	 90140000		a0l = xmem[i0]			# LN: 233 | 
680   	 019C	 88D40001		ymem[i1] = a0			# LN: 233 | 
681   	 019D				cline_233_0:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
682   	 019D				init_latch_label_1:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
683   	 019D	 90750002		i0 = i7 - (0x2)			# LN: 227 | 
684   	 019E	 B0140000		i0 = xmem[i0]			# LN: 227 | 
685   	 019F	 91750002		i1 = i7 - (0x2)			# LN: 227 | 
686   	 01A0	 02087FFF		i0 += 1			# LN: 227 | 
687   	 01A1	 B0540001		xmem[i1] = i0			# LN: 227 | 
688   	 01A2	 90750001		i0 = i7 - (0x1)			# LN: 227 | 
689   	 01A3	 B0140000		i0 = xmem[i0]			# LN: 227 | 
690   	 01A4	 91750001		i1 = i7 - (0x1)			# LN: 227 | 
691   	 01A5	 02087FFF		i0 += 1			# LN: 227 | 
692   	 01A6	 B0540001		xmem[i1] = i0			# LN: 227 | 
693   	 01A7	 80080175		jmp (for_1)			# LN: 227 | 
694   	 01A8				cline_227_1:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
695   	 01A8				for_end_1:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
696   	 01A8	 88040000		a0 = xmem[_outputChannelNum + 0]			# LN: 237 | 
697   	 01A9	 894A0004		uhalfword(a1) = (0x4)			# LN: 237 | 
698   	 01AA	 00004F08		a0 - a1			# LN: 237 | 
699   	 01AB	 844801B3		if (a != 0) jmp (else_10)			# LN: 237 | 
700   	 01AC				cline_237_0:			/* LN: 239 | CYCLE: 0 | RULES: () */ 
701   	 01AC	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 239 | 
702   	 01AD	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 239 | 
703   	 01AE	 808801CE		call (_tremolo_procces)			# LN: 239 | 
704   	 01AF				cline_239_0:			/* LN: 240 | CYCLE: 0 | RULES: () */ 
705   	 01AF	 A0050010		i0 = (0) + (_sampleBuffer + 16)			# LN: 240 | 
706   	 01B0	 A1050030		i1 = (0) + (_sampleBuffer + 48)			# LN: 240 | 
707   	 01B1	 808801CE		call (_tremolo_procces)			# LN: 240 | 
708   	 01B2	 800801B3		jmp (endif_10)			# LN: 240 | 
709   	 01B3				cline_240_0:			/* LN: 242 | CYCLE: 0 | RULES: () */ 
710   	 01B3				endif_10:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
711   	 01B3				else_10:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
712   	 01B3	 800801B4		jmp (__epilogue_226)			# LN: 242 | 
713   	 01B4				__epilogue_226:			/* LN: 242 | CYCLE: 0 | RULES: () */ 
714   	 01B4	 97750005		i7 = i7 - (0x5)			# LN: 242 | 
715   	 01B5	 02177FFF		i7 -= 1			# LN: 242 | 
716   	 01B6	 81880000		ret			# LN: 242 | 
717   						
718   						
719   						
720   	 01B7				_tremolo_init:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
721   	 01B7	 BB540007		xmem[i7] = i7			# LN: 73 | 
722   	 01B8	 020F7FFF		i7 += 1			# LN: 73 | 
723   	 01B9				cline_73_0:			/* LN: 76 | CYCLE: 0 | RULES: () */ 
724   	 01B9	 88040000		a0 = xmem[__extractedConst_3_1 + 0]			# LN: 76 | 
725   	 01BA	 98440000		xmem[_inputGain + 0] = a0h			# LN: 76 | 
726   	 01BB				cline_76_0:			/* LN: 77 | CYCLE: 0 | RULES: () */ 
727   	 01BB	 884A0004		uhalfword(a0) = (0x4)			# LN: 77 | 
728   	 01BC	 98440000		xmem[_outputChannelNum + 0] = a0h			# LN: 77 | 
729   	 01BD				cline_77_0:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
730   	 01BD	 88040000		a0 = xmem[__extractedConst_0_8 + 0]			# LN: 78 | 
731   	 01BE	 98440001		xmem[_tremolo_data + 1] = a0h			# LN: 78 | 
732   	 01BF				cline_78_0:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
733   	 01BF	 88040000		a0 = xmem[__extractedConst_0_8 + 0]			# LN: 79 | 
734   	 01C0	 98440002		xmem[_tremolo_data + 2] = a0h			# LN: 79 | 
735   	 01C1				cline_79_0:			/* LN: 80 | CYCLE: 0 | RULES: () */ 
736   	 01C1	 884A0003		uhalfword(a0) = (0x3)			# LN: 80 | 
737   	 01C2	 98440003		xmem[_tremolo_data + 3] = a0h			# LN: 80 | 
738   	 01C3				cline_80_0:			/* LN: 81 | CYCLE: 0 | RULES: () */ 
739   	 01C3	 00004DC0		a0 = 0			# LN: 81 | 
740   	 01C4	 98440004		xmem[_tremolo_data + 4] = a0h			# LN: 81 | 
741   	 01C5				cline_81_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
742   	 01C5	 884AAEC3		uhalfword(a0) = (0xaec3)			# LN: 82 | 
743   	 01C6	 907A3E1F		a0l = (0x3e1f)			# LN: 82 | 
744   	 01C7	 900A6715		lo16(a0l) = (0x6715)			# LN: 82 | 
745   	 01C8	 A0440005		xmem[_tremolo_data + 5] = a0g			# LN: 82 | 
746   	 01C9	 98440006		xmem[_tremolo_data + 6] = a0h			# LN: 82 | 
747   	 01CA	 90440007		xmem[_tremolo_data + 7] = a0l			# LN: 82 | 
748   	 01CB				cline_82_0:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
749   	 01CB	 800801CC		jmp (__epilogue_220)			# LN: 83 | 
750   	 01CC				__epilogue_220:			/* LN: 83 | CYCLE: 0 | RULES: () */ 
751   	 01CC	 02177FFF		i7 -= 1			# LN: 83 | 
752   	 01CD	 81880000		ret			# LN: 83 | 
753   						
754   						
755   						
756   	 01CE				_tremolo_procces:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
757   	 01CE	 BB540007		xmem[i7] = i7			# LN: 103 | 
758   	 01CF	 020F7FFF		i7 += 1			# LN: 103 | 
759   	 01D0	 8775000E		i7 = i7 + (0xe)			# LN: 103 | 
760   	 01D1	 94750001		i4 = i7 - (0x1)			# LN: 103 | 
761   	 01D2	 B0540004		xmem[i4] = i0			# LN: 103 | 
762   	 01D3	 90750002		i0 = i7 - (0x2)			# LN: 103 | 
763   	 01D4	 B1540000		xmem[i0] = i1			# LN: 103 | 
764   	 01D5				cline_103_0:			/* LN: 114 | CYCLE: 0 | RULES: () */ 
765   	 01D5	 90750001		i0 = i7 - (0x1)			# LN: 114 | 
766   	 01D6	 88140000		a0 = xmem[i0]			# LN: 114 | 
767   	 01D7	 90750003		i0 = i7 - (0x3)			# LN: 114 | 
768   	 01D8	 88540000		xmem[i0] = a0			# LN: 114 | 
769   	 01D9				cline_114_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
770   	 01D9	 90750002		i0 = i7 - (0x2)			# LN: 115 | 
771   	 01DA	 88140000		a0 = xmem[i0]			# LN: 115 | 
772   	 01DB	 90750004		i0 = i7 - (0x4)			# LN: 115 | 
773   	 01DC	 88540000		xmem[i0] = a0			# LN: 115 | 
774   	 01DD				cline_115_0:			/* LN: 116 | CYCLE: 0 | RULES: () */ 
775   	 01DD	 90750005		i0 = i7 - (0x5)			# LN: 116 | 
776   	 01DE	 00004DC0		a0 = 0			# LN: 116 | 
777   	 01DF	 98540000		xmem[i0] = a0h			# LN: 116 | 
778   	 01E0				cline_116_0:			/* LN: 124 | CYCLE: 0 | RULES: () */ 
779   	 01E0	 88040004		a0 = xmem[_tremolo_data + 4]			# LN: 124 | 
780   	 01E1	 90750008		i0 = i7 - (0x8)			# LN: 124 | 
781   	 01E2	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 124, 124 | 
782   	 01E3	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 124, 124 | 
783   	 01E4	 90540000		xmem[i0] = a0l			# LN: 124 | 
784   	 01E5				cline_124_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
785   	 01E5	 800801E6		jmp (dummy_init_0)			# LN: 126 | 
786   	 01E6				for_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
787   	 01E6				dummy_init_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
788   	 01E6	 90750001		i0 = i7 - (0x1)			# LN: 126 | 
789   	 01E7	 B0140000		i0 = xmem[i0]			# LN: 126 | 
790   	 01E8	 91750003		i1 = i7 - (0x3)			# LN: 126 | 
791   	 01E9	 80050010		i0 = i0 + (0x10)			# LN: 126 | 
792   	 01EA	 02107FFF		i0 -= 1			# LN: 126 | 
793   	 01EB	 88140001		a0 = xmem[i1]			# LN: 126 | 
794   	 01EC	 09707FFF		a1 = i0			# LN: 126 | 
795   	 01ED	 00004F08		a0 - a1			# LN: 126 | 
796   	 01EE	 85480240		if (a > 0) jmp (for_end_0)			# LN: 126 | 
797   	 01EF				cline_126_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
798   	 01EF	 90750008		i0 = i7 - (0x8)			# LN: 131 | 
799   	 01F0	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 131, 131 | 
800   	 01F1	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 131, 131 | 
801   	 01F2	 90140000		a0l = xmem[i0]			# LN: 131 | 
802   	 01F3	 80880000		call (_lfo)			# LN: 131 | 
803   	 01F4	 90750005		i0 = i7 - (0x5)			# LN: 131 | 
804   	 01F5	 98540000		xmem[i0] = a0h			# LN: 131 | 
805   	 01F6				cline_131_0:			/* LN: 132 | CYCLE: 0 | RULES: () */ 
806   	 01F6	 80040002		x0 = xmem[_tremolo_data + 2]			# LN: 132 | 
807   	 01F7	 90750005		i0 = i7 - (0x5)			# LN: 132 | 
808   	 01F8	 81140000		x1 = xmem[i0]			# LN: 132 | 
809   	 01F9	 00002080		a0 = x0 * x1			# LN: 132 | 
810   	 01FA	 9075000B		i0 = i7 - (0xb)			# LN: 132 | 
811   	 01FB	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 132, 132 | 
812   	 01FC	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 132, 132 | 
813   	 01FD	 90540000		xmem[i0] = a0l			# LN: 132 | 
814   	 01FE				cline_132_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
815   	 01FE	 90750003		i0 = i7 - (0x3)			# LN: 133 | 
816   	 01FF	 B0140000		i0 = xmem[i0]			# LN: 133 | 
817   	 0200	 88040000		a0 = xmem[__extractedConst_0_8 + 0]			# LN: 133 | 
818   	 0201	 9175000B		i1 = i7 - (0xb)			# LN: 133 | 
819   	 0202	 A1140011		a1g = xmem[i1]; i1 += 1			# LN: 133, 133 | 
820   	 0203	 99140011		a1h = xmem[i1]; i1 += 1			# LN: 133, 133 | 
821   	 0204	 91140001		a1l = xmem[i1]			# LN: 133 | 
822   	 0205	 20404449		x0 = ymem[i0]; a1 = a0 - a1			# LN: 133, 133 | 
823   	 0206	 00002800		a0 = +x0			# LN: 133 | 
824   	 0207	 80880000		call (__mul_sat_laccum)			# LN: 133 | 
825   	 0208	 90750004		i0 = i7 - (0x4)			# LN: 133 | 
826   	 0209	 B0140000		i0 = xmem[i0]			# LN: 133 | 
827   	 020A	 00007FFF		nop #empty cycle
828   	 020B	 88D40000		ymem[i0] = a0			# LN: 133 | 
829   	 020C				cline_133_0:			/* LN: 140 | CYCLE: 0 | RULES: () */ 
830   	 020C	 A0040005		a0g = xmem[_tremolo_data + 5]			# LN: 140 | 
831   	 020D	 98040006		a0h = xmem[_tremolo_data + 6]			# LN: 140 | 
832   	 020E	 90040007		a0l = xmem[_tremolo_data + 7]			# LN: 140 | 
833   	 020F	 9075000E		i0 = i7 - (0xe)			# LN: 140 | 
834   	 0210	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 140, 140 | 
835   	 0211	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 140, 140 | 
836   	 0212	 90540000		xmem[i0] = a0l			# LN: 140 | 
837   	 0213				cline_140_0:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
838   	 0213	 90750008		i0 = i7 - (0x8)			# LN: 141 | 
839   	 0214	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 141, 141 | 
840   	 0215	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 141, 141 | 
841   	 0216	 90140000		a0l = xmem[i0]			# LN: 141 | 
842   	 0217	 9075000E		i0 = i7 - (0xe)			# LN: 141 | 
843   	 0218	 A1140010		a1g = xmem[i0]; i0 += 1			# LN: 141, 141 | 
844   	 0219	 99140010		a1h = xmem[i0]; i0 += 1			# LN: 141, 141 | 
845   	 021A	 91140000		a1l = xmem[i0]			# LN: 141 | 
846   	 021B	 00004408		a0 = a0 + a1			# LN: 141 | 
847   	 021C	 90750008		i0 = i7 - (0x8)			# LN: 141 | 
848   	 021D	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 141, 141 | 
849   	 021E	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 141, 141 | 
850   	 021F	 90540000		xmem[i0] = a0l			# LN: 141 | 
851   	 0220				cline_141_0:			/* LN: 143 | CYCLE: 0 | RULES: () */ 
852   	 0220	 90750008		i0 = i7 - (0x8)			# LN: 143 | 
853   	 0221	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 143, 143 | 
854   	 0222	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 143, 143 | 
855   	 0223	 90140000		a0l = xmem[i0]			# LN: 143 | 
856   	 0224	 00004C24		b0 =+ a0			# LN: 143 | 
857   	 0225	 00004E44		b0 = b0 >> 1			# LN: 143 | 
858   	 0226	 88040000		a0 = xmem[__extractedConst_0_8 + 0]			# LN: 143 | 
859   	 0227	 00004E40		a0 = a0 >> 1			# LN: 143 | 
860   	 0228	 00004F24		b0 - a0			# LN: 143 | 
861   	 0229	 86880235		if (b < 0) jmp (else_0)			# LN: 143 | 
862   	 022A				cline_143_0:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
863   	 022A	 90750008		i0 = i7 - (0x8)			# LN: 144 | 
864   	 022B	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 144, 144 | 
865   	 022C	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 144, 144 | 
866   	 022D	 90140000		a0l = xmem[i0]			# LN: 144 | 
867   	 022E	 89040000		a1 = xmem[__extractedConst_0_8 + 0]			# LN: 144 | 
868   	 022F	 00004448		a0 = a0 - a1			# LN: 144 | 
869   	 0230	 90750008		i0 = i7 - (0x8)			# LN: 144 | 
870   	 0231	 A0540010		xmem[i0] = a0g; i0 += 1			# LN: 144, 144 | 
871   	 0232	 98540010		xmem[i0] = a0h; i0 += 1			# LN: 144, 144 | 
872   	 0233	 90540000		xmem[i0] = a0l			# LN: 144 | 
873   	 0234	 80080235		jmp (endif_0)			# LN: 144 | 
874   	 0235				cline_144_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
875   	 0235				init_latch_label_0:			/* LN: 145 | CYCLE: 0 | RULES: () */ 
876   	 0235				endif_0:			/* LN: 143 | CYCLE: 0 | RULES: () */ 
877   	 0235				else_0:			/* LN: 143 | CYCLE: 0 | RULES: () */ 
878   	 0235	 90750003		i0 = i7 - (0x3)			# LN: 126 | 
879   	 0236	 B0140000		i0 = xmem[i0]			# LN: 126 | 
880   	 0237	 91750003		i1 = i7 - (0x3)			# LN: 126 | 
881   	 0238	 02087FFF		i0 += 1			# LN: 126 | 
882   	 0239	 B0540001		xmem[i1] = i0			# LN: 126 | 
883   	 023A	 90750004		i0 = i7 - (0x4)			# LN: 126 | 
884   	 023B	 B0140000		i0 = xmem[i0]			# LN: 126 | 
885   	 023C	 91750004		i1 = i7 - (0x4)			# LN: 126 | 
886   	 023D	 02087FFF		i0 += 1			# LN: 126 | 
887   	 023E	 B0540001		xmem[i1] = i0			# LN: 126 | 
888   	 023F	 800801E6		jmp (for_0)			# LN: 126 | 
889   	 0240				cline_126_1:			/* LN: 148 | CYCLE: 0 | RULES: () */ 
890   	 0240				for_end_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
891   	 0240	 90750008		i0 = i7 - (0x8)			# LN: 148 | 
892   	 0241	 A0140010		a0g = xmem[i0]; i0 += 1			# LN: 148, 148 | 
893   	 0242	 98140010		a0h = xmem[i0]; i0 += 1			# LN: 148, 148 | 
894   	 0243	 90140000		a0l = xmem[i0]			# LN: 148 | 
895   	 0244	 88440004		xmem[_tremolo_data + 4] = a0			# LN: 148 | 
896   	 0245				cline_148_0:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
897   	 0245	 80080246		jmp (__epilogue_222)			# LN: 149 | 
898   	 0246				__epilogue_222:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
899   	 0246	 9775000E		i7 = i7 - (0xe)			# LN: 149 | 
900   	 0247	 02177FFF		i7 -= 1			# LN: 149 | 
901   	 0248	 81880000		ret			# LN: 149 | 
902   						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_220                                                                  			         Relocatable         main_GEN_0014:01CCH
__epilogue_222                                                                  			         Relocatable         main_GEN_0014:0246H
__epilogue_224                                                                  			         Relocatable         main_GEN_0014:0093H
__epilogue_226                                                                  			         Relocatable         main_GEN_0014:01B4H
__epilogue_228                                                                  			         Relocatable         main_GEN_0014:0168H
__extractedConst_0_8                                                            			         Relocatable         main_GEN_0000:0000H
__extractedConst_1_2                                                            			         Relocatable         main_GEN_0001:0000H
__extractedConst_2_2                                                            			         Relocatable         main_GEN_0002:0000H
__extractedConst_3_1                                                            			         Relocatable         main_GEN_0003:0000H
__mul_sat_laccum                                                                					 External   
__start                                                                         					 External   
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_getnchannels                                                        					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_inputGain                                                                      			  Public Relocatable       main_GEN_0004:0000H
_lfo                                                                            			  Public Relocatable       main_GEN_0014:0000H
_main                                                                           			  Public Relocatable       main_GEN_0014:0096H
_memset                                                                         					 External   
_outputChannelNum                                                               			  Public Relocatable       main_GEN_0005:0000H
_printf                                                                         					 External   
_processing_foo                                                                 			  Public Relocatable       main_GEN_0014:016BH
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0006:0000H
_sampleBufferLeft                                                               			  Public Relocatable       main_GEN_0007:0000H
_sampleBufferLeftSide                                                           			  Public Relocatable       main_GEN_0008:0000H
_sampleBufferRight                                                              			  Public Relocatable       main_GEN_0009:0000H
_sampleBufferRightSide                                                          			  Public Relocatable       main_GEN_0010:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0011:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0012:0000H
_tremolo_data                                                                   			  Public Relocatable       main_GEN_0013:0000H
_tremolo_init                                                                   			  Public Relocatable       main_GEN_0014:01B7H
_tremolo_procces                                                                			  Public Relocatable       main_GEN_0014:01CEH
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0014:01D5H
cline_114_0                                                                     			  Unused Relocatable        main_GEN_0014:01D9H
cline_115_0                                                                     			  Unused Relocatable        main_GEN_0014:01DDH
cline_116_0                                                                     			  Unused Relocatable        main_GEN_0014:01E0H
cline_124_0                                                                     			  Unused Relocatable        main_GEN_0014:01E5H
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0014:01EFH
cline_126_1                                                                     			  Unused Relocatable        main_GEN_0014:0240H
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0014:01F6H
cline_132_0                                                                     			  Unused Relocatable        main_GEN_0014:01FEH
cline_133_0                                                                     			  Unused Relocatable        main_GEN_0014:020CH
cline_140_0                                                                     			  Unused Relocatable        main_GEN_0014:0213H
cline_141_0                                                                     			  Unused Relocatable        main_GEN_0014:0220H
cline_143_0                                                                     			  Unused Relocatable        main_GEN_0014:022AH
cline_144_0                                                                     			  Unused Relocatable        main_GEN_0014:0235H
cline_148_0                                                                     			  Unused Relocatable        main_GEN_0014:0245H
cline_151_0                                                                     			  Unused Relocatable        main_GEN_0014:0007H
cline_153_0                                                                     			  Unused Relocatable        main_GEN_0014:000BH
cline_155_0                                                                     			  Unused Relocatable        main_GEN_0014:0014H
cline_155_1                                                                     			  Unused Relocatable        main_GEN_0014:003AH
cline_157_0                                                                     			  Unused Relocatable        main_GEN_0014:001DH
cline_159_0                                                                     			  Unused Relocatable        main_GEN_0014:0026H
cline_161_0                                                                     			  Unused Relocatable        main_GEN_0014:0031H
cline_168_0                                                                     			  Unused Relocatable        main_GEN_0014:003EH
cline_170_0                                                                     			  Unused Relocatable        main_GEN_0014:0048H
cline_170_1                                                                     			  Unused Relocatable        main_GEN_0014:004CH
cline_172_0                                                                     			  Unused Relocatable        main_GEN_0014:004AH
cline_179_0                                                                     			  Unused Relocatable        main_GEN_0014:0050H
cline_181_0                                                                     			  Unused Relocatable        main_GEN_0014:005CH
cline_181_1                                                                     			  Unused Relocatable        main_GEN_0014:0091H
cline_183_0                                                                     			  Unused Relocatable        main_GEN_0014:005EH
cline_185_0                                                                     			  Unused Relocatable        main_GEN_0014:0067H
cline_187_0                                                                     			  Unused Relocatable        main_GEN_0014:0076H
cline_189_0                                                                     			  Unused Relocatable        main_GEN_0014:0082H
cline_191_0                                                                     			  Unused Relocatable        main_GEN_0014:0084H
cline_200_0                                                                     			  Unused Relocatable        main_GEN_0014:0093H
cline_221_0                                                                     			  Unused Relocatable        main_GEN_0014:016EH
cline_223_0                                                                     			  Unused Relocatable        main_GEN_0014:0171H
cline_224_0                                                                     			  Unused Relocatable        main_GEN_0014:0174H
cline_227_0                                                                     			  Unused Relocatable        main_GEN_0014:017DH
cline_227_1                                                                     			  Unused Relocatable        main_GEN_0014:01A8H
cline_229_0                                                                     			  Unused Relocatable        main_GEN_0014:0186H
cline_230_0                                                                     			  Unused Relocatable        main_GEN_0014:018DH
cline_232_0                                                                     			  Unused Relocatable        main_GEN_0014:0196H
cline_233_0                                                                     			  Unused Relocatable        main_GEN_0014:019DH
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0014:01ACH
cline_239_0                                                                     			  Unused Relocatable        main_GEN_0014:01AFH
cline_240_0                                                                     			  Unused Relocatable        main_GEN_0014:01B3H
cline_259_0                                                                     			  Unused Relocatable        main_GEN_0014:009DH
cline_268_0                                                                     			  Unused Relocatable        main_GEN_0014:00A0H
cline_275_0                                                                     			  Unused Relocatable        main_GEN_0014:00A4H
cline_275_1                                                                     			  Unused Relocatable        main_GEN_0014:00B1H
cline_276_0                                                                     			  Unused Relocatable        main_GEN_0014:00ABH
cline_280_0                                                                     			  Unused Relocatable        main_GEN_0014:00B8H
cline_281_0                                                                     			  Unused Relocatable        main_GEN_0014:00BDH
cline_282_0                                                                     			  Unused Relocatable        main_GEN_0014:00C1H
cline_284_0                                                                     			  Unused Relocatable        main_GEN_0014:00C3H
cline_285_0                                                                     			  Unused Relocatable        main_GEN_0014:00C5H
cline_291_0                                                                     			  Unused Relocatable        main_GEN_0014:00CAH
cline_292_0                                                                     			  Unused Relocatable        main_GEN_0014:00CFH
cline_293_0                                                                     			  Unused Relocatable        main_GEN_0014:00D4H
cline_294_0                                                                     			  Unused Relocatable        main_GEN_0014:00D9H
cline_299_0                                                                     			  Unused Relocatable        main_GEN_0014:00E1H
cline_300_0                                                                     			  Unused Relocatable        main_GEN_0014:00ECH
cline_301_0                                                                     			  Unused Relocatable        main_GEN_0014:00F0H
cline_303_0                                                                     			  Unused Relocatable        main_GEN_0014:00F2H
cline_304_0                                                                     			  Unused Relocatable        main_GEN_0014:00F4H
cline_307_0                                                                     			  Unused Relocatable        main_GEN_0014:00F5H
cline_318_0                                                                     			  Unused Relocatable        main_GEN_0014:0100H
cline_318_1                                                                     			  Unused Relocatable        main_GEN_0014:0160H
cline_320_0                                                                     			  Unused Relocatable        main_GEN_0014:0104H
cline_320_1                                                                     			  Unused Relocatable        main_GEN_0014:012CH
cline_322_0                                                                     			  Unused Relocatable        main_GEN_0014:010DH
cline_322_1                                                                     			  Unused Relocatable        main_GEN_0014:0126H
cline_324_0                                                                     			  Unused Relocatable        main_GEN_0014:0112H
cline_325_0                                                                     			  Unused Relocatable        main_GEN_0014:011FH
cline_329_0                                                                     			  Unused Relocatable        main_GEN_0014:012DH
cline_331_0                                                                     			  Unused Relocatable        main_GEN_0014:0131H
cline_331_1                                                                     			  Unused Relocatable        main_GEN_0014:0159H
cline_333_0                                                                     			  Unused Relocatable        main_GEN_0014:013AH
cline_333_1                                                                     			  Unused Relocatable        main_GEN_0014:0153H
cline_335_0                                                                     			  Unused Relocatable        main_GEN_0014:0147H
cline_336_0                                                                     			  Unused Relocatable        main_GEN_0014:014CH
cline_344_0                                                                     			  Unused Relocatable        main_GEN_0014:0163H
cline_345_0                                                                     			  Unused Relocatable        main_GEN_0014:0166H
cline_348_0                                                                     			  Unused Relocatable        main_GEN_0014:0168H
cline_73_0                                                                      			  Unused Relocatable        main_GEN_0014:01B9H
cline_76_0                                                                      			  Unused Relocatable        main_GEN_0014:01BBH
cline_77_0                                                                      			  Unused Relocatable        main_GEN_0014:01BDH
cline_78_0                                                                      			  Unused Relocatable        main_GEN_0014:01BFH
cline_79_0                                                                      			  Unused Relocatable        main_GEN_0014:01C1H
cline_80_0                                                                      			  Unused Relocatable        main_GEN_0014:01C3H
cline_81_0                                                                      			  Unused Relocatable        main_GEN_0014:01C5H
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0014:01CBH
dummy                                                                           			  Unused Number				     0 (0H)
dummy_init_0                                                                    			         Relocatable         main_GEN_0014:01E6H
dummy_init_1                                                                    			         Relocatable         main_GEN_0014:0175H
else_0                                                                          			         Relocatable         main_GEN_0014:0235H
else_1                                                                          			         Relocatable         main_GEN_0014:003AH
else_10                                                                         			         Relocatable         main_GEN_0014:01B3H
else_11                                                                         			         Relocatable         main_GEN_0014:00C5H
else_12                                                                         			         Relocatable         main_GEN_0014:00F4H
else_2                                                                          			         Relocatable         main_GEN_0014:001DH
else_3                                                                          			         Relocatable         main_GEN_0014:0031H
else_4                                                                          			         Relocatable         main_GEN_0014:004CH
else_5                                                                          			         Relocatable         main_GEN_0014:004AH
else_6                                                                          			         Relocatable         main_GEN_0014:0091H
else_7                                                                          			         Relocatable         main_GEN_0014:005EH
else_8                                                                          			         Relocatable         main_GEN_0014:0076H
else_9                                                                          			         Relocatable         main_GEN_0014:0084H
endif_0                                                                         			         Relocatable         main_GEN_0014:0235H
endif_10                                                                        			         Relocatable         main_GEN_0014:01B3H
endif_11                                                                        			  Unused Relocatable        main_GEN_0014:00C5H
endif_12                                                                        			  Unused Relocatable        main_GEN_0014:00F4H
for_0                                                                           			         Relocatable         main_GEN_0014:01E6H
for_1                                                                           			         Relocatable         main_GEN_0014:0175H
for_3                                                                           			         Relocatable         main_GEN_0014:00F8H
for_5                                                                           			         Relocatable         main_GEN_0014:0107H
for_7                                                                           			         Relocatable         main_GEN_0014:0134H
for_end_0                                                                       			         Relocatable         main_GEN_0014:0240H
for_end_1                                                                       			         Relocatable         main_GEN_0014:01A8H
for_end_2                                                                       			  Unused Relocatable        main_GEN_0014:00B1H
for_end_3                                                                       			         Relocatable         main_GEN_0014:0160H
for_end_4                                                                       			  Unused Relocatable        main_GEN_0014:012CH
for_end_5                                                                       			         Relocatable         main_GEN_0014:0126H
for_end_6                                                                       			  Unused Relocatable        main_GEN_0014:0159H
for_end_7                                                                       			         Relocatable         main_GEN_0014:0153H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0014:0235H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0014:019DH
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0014:00ABH
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0014:011FH
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0014:0126H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0014:014CH
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0014:0153H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0014:0159H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0014:00A4H
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0014:0104H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0014:0131H
label_end_92                                                                    			         Relocatable         main_GEN_0014:00B0H
label_end_93                                                                    			         Relocatable         main_GEN_0014:012BH
label_end_94                                                                    			         Relocatable         main_GEN_0014:0158H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0003H	 main_GEN_0001                           			 X_OVLY                                  
0003H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0080H	 main_GEN_0006                           			 Y_OVLY                                  
0001H	 main_GEN_0007                           			 X_OVLY                                  
0001H	 main_GEN_0008                           			 X_OVLY                                  
0001H	 main_GEN_0009                           			 X_OVLY                                  
0001H	 main_GEN_0010                           			 X_OVLY                                  
0021H	 main_GEN_0011                           			 X_OVLY                                  
0021H	 main_GEN_0012                           			 X_OVLY                                  
0008H	 main_GEN_0013                           			 X_OVLY                                  
0249H	 main_GEN_0014                           			 CODE_OVLY                               
