/////////////////////////////////////////////////////////////////////////////////
//
// @file main.cpp
//
// Module: tremolo
// Description:  Add tremolo effect to input signal
// $Source: /
// $Revision: 1.0 
// $Date:    02.03.2018.
// $Author:  Dejan Martinov
//
/////////////////////////////////////////////////////////////////////////////////

#include <stdlib.h>
#include <string.h>
//#include <math.h>
#include "stdfix_emu.h"
#include "fixed_point_math.h"
#include "WAVheader.h"
#include "common.h"

/////////////////////////////////////////////////////////////////////////////////
// Constant definitions
/////////////////////////////////////////////////////////////////////////////////
#define BLOCK_SIZE 16
#define MAX_NUM_CHANNEL 8
#define SAMPLE_RATE 48000
#define PI 3.14159265358979323846
#define OUTPUT_CHANNELS_NUM 4
#define INVERSE_SAMPLE_RATE  0.000030517578125
#define MAX_LOOKUP_INDEX 511
#define TABLE_SIZE 512
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// IO buffers
/////////////////////////////////////////////////////////////////////////////////
DSPfract sampleBuffer[MAX_NUM_CHANNEL][BLOCK_SIZE];
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Buffer pointers [L R][Ls Rs]
/////////////////////////////////////////////////////////////////////////////////
DSPfract* sampleBufferLeft = sampleBuffer[0];
DSPfract* sampleBufferRight = sampleBuffer[1];
DSPfract* sampleBufferLeftSide = sampleBuffer[2];
DSPfract* sampleBufferRightSide = sampleBuffer[3];
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Input gain. Default -4dB.
/////////////////////////////////////////////////////////////////////////////////
DSPfract inputGain = FRACT_NUM(0.63);
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Number of output channels. Default 4.
/////////////////////////////////////////////////////////////////////////////////
DSPint outputChannelNum = 4;
/////////////////////////////////////////////////////////////////////////////////

DSPfract triangle_table[TABLE_SIZE] =
{
	FRACT_NUM(0.500000), FRACT_NUM(0.503906), FRACT_NUM(0.507813), FRACT_NUM(0.511719), FRACT_NUM(0.515625), FRACT_NUM(0.519531), FRACT_NUM(0.523438), FRACT_NUM(0.527344),
	FRACT_NUM(0.531250), FRACT_NUM(0.535156), FRACT_NUM(0.539063), FRACT_NUM(0.542969), FRACT_NUM(0.546875), FRACT_NUM(0.550781), FRACT_NUM(0.554688), FRACT_NUM(0.558594),
	FRACT_NUM(0.562500), FRACT_NUM(0.566406), FRACT_NUM(0.570313), FRACT_NUM(0.574219), FRACT_NUM(0.578125), FRACT_NUM(0.582031), FRACT_NUM(0.585938), FRACT_NUM(0.589844),
	FRACT_NUM(0.593750), FRACT_NUM(0.597656), FRACT_NUM(0.601563), FRACT_NUM(0.605469), FRACT_NUM(0.609375), FRACT_NUM(0.613281), FRACT_NUM(0.617188), FRACT_NUM(0.621094),
	FRACT_NUM(0.625000), FRACT_NUM(0.628906), FRACT_NUM(0.632813), FRACT_NUM(0.636719), FRACT_NUM(0.640625), FRACT_NUM(0.644531), FRACT_NUM(0.648438), FRACT_NUM(0.652344),
	FRACT_NUM(0.656250), FRACT_NUM(0.660156), FRACT_NUM(0.664063), FRACT_NUM(0.667969), FRACT_NUM(0.671875), FRACT_NUM(0.675781), FRACT_NUM(0.679688), FRACT_NUM(0.683594),
	FRACT_NUM(0.687500), FRACT_NUM(0.691406), FRACT_NUM(0.695313), FRACT_NUM(0.699219), FRACT_NUM(0.703125), FRACT_NUM(0.707031), FRACT_NUM(0.710938), FRACT_NUM(0.714844),
	FRACT_NUM(0.718750), FRACT_NUM(0.722656), FRACT_NUM(0.726563), FRACT_NUM(0.730469), FRACT_NUM(0.734375), FRACT_NUM(0.738281), FRACT_NUM(0.742188), FRACT_NUM(0.746094),
	FRACT_NUM(0.750000), FRACT_NUM(0.753906), FRACT_NUM(0.757813), FRACT_NUM(0.761719), FRACT_NUM(0.765625), FRACT_NUM(0.769531), FRACT_NUM(0.773438), FRACT_NUM(0.777344),
	FRACT_NUM(0.781250), FRACT_NUM(0.785156), FRACT_NUM(0.789063), FRACT_NUM(0.792969), FRACT_NUM(0.796875), FRACT_NUM(0.800781), FRACT_NUM(0.804688), FRACT_NUM(0.808594),
	FRACT_NUM(0.812500), FRACT_NUM(0.816406), FRACT_NUM(0.820313), FRACT_NUM(0.824219), FRACT_NUM(0.828125), FRACT_NUM(0.832031), FRACT_NUM(0.835938), FRACT_NUM(0.839844),
	FRACT_NUM(0.843750), FRACT_NUM(0.847656), FRACT_NUM(0.851563), FRACT_NUM(0.855469), FRACT_NUM(0.859375), FRACT_NUM(0.863281), FRACT_NUM(0.867188), FRACT_NUM(0.871094),
	FRACT_NUM(0.875000), FRACT_NUM(0.878906), FRACT_NUM(0.882813), FRACT_NUM(0.886719), FRACT_NUM(0.890625), FRACT_NUM(0.894531), FRACT_NUM(0.898438), FRACT_NUM(0.902344),
	FRACT_NUM(0.906250), FRACT_NUM(0.910156), FRACT_NUM(0.914063), FRACT_NUM(0.917969), FRACT_NUM(0.921875), FRACT_NUM(0.925781), FRACT_NUM(0.929688), FRACT_NUM(0.933594),
	FRACT_NUM(0.937500), FRACT_NUM(0.941406), FRACT_NUM(0.945313), FRACT_NUM(0.949219), FRACT_NUM(0.953125), FRACT_NUM(0.957031), FRACT_NUM(0.960938), FRACT_NUM(0.964844),
	FRACT_NUM(0.968750), FRACT_NUM(0.972656), FRACT_NUM(0.976563), FRACT_NUM(0.980469), FRACT_NUM(0.984375), FRACT_NUM(0.988281), FRACT_NUM(0.992188), FRACT_NUM(0.996094),
	FRACT_NUM(1.000000), FRACT_NUM(0.996094), FRACT_NUM(0.992188), FRACT_NUM(0.988281), FRACT_NUM(0.984375), FRACT_NUM(0.980469), FRACT_NUM(0.976563), FRACT_NUM(0.972656),
	FRACT_NUM(0.968750), FRACT_NUM(0.964844), FRACT_NUM(0.960938), FRACT_NUM(0.957031), FRACT_NUM(0.953125), FRACT_NUM(0.949219), FRACT_NUM(0.945313), FRACT_NUM(0.941406),
	FRACT_NUM(0.937500), FRACT_NUM(0.933594), FRACT_NUM(0.929688), FRACT_NUM(0.925781), FRACT_NUM(0.921875), FRACT_NUM(0.917969), FRACT_NUM(0.914063), FRACT_NUM(0.910156),
	FRACT_NUM(0.906250), FRACT_NUM(0.902344), FRACT_NUM(0.898438), FRACT_NUM(0.894531), FRACT_NUM(0.890625), FRACT_NUM(0.886719), FRACT_NUM(0.882813), FRACT_NUM(0.878906),
	FRACT_NUM(0.875000), FRACT_NUM(0.871094), FRACT_NUM(0.867188), FRACT_NUM(0.863281), FRACT_NUM(0.859375), FRACT_NUM(0.855469), FRACT_NUM(0.851563), FRACT_NUM(0.847656),
	FRACT_NUM(0.843750), FRACT_NUM(0.839844), FRACT_NUM(0.835938), FRACT_NUM(0.832031), FRACT_NUM(0.828125), FRACT_NUM(0.824219), FRACT_NUM(0.820313), FRACT_NUM(0.816406),
	FRACT_NUM(0.812500), FRACT_NUM(0.808594), FRACT_NUM(0.804688), FRACT_NUM(0.800781), FRACT_NUM(0.796875), FRACT_NUM(0.792969), FRACT_NUM(0.789063), FRACT_NUM(0.785156),
	FRACT_NUM(0.781250), FRACT_NUM(0.777344), FRACT_NUM(0.773438), FRACT_NUM(0.769531), FRACT_NUM(0.765625), FRACT_NUM(0.761719), FRACT_NUM(0.757813), FRACT_NUM(0.753906),
	FRACT_NUM(0.750000), FRACT_NUM(0.746094), FRACT_NUM(0.742188), FRACT_NUM(0.738281), FRACT_NUM(0.734375), FRACT_NUM(0.730469), FRACT_NUM(0.726563), FRACT_NUM(0.722656),
	FRACT_NUM(0.718750), FRACT_NUM(0.714844), FRACT_NUM(0.710938), FRACT_NUM(0.707031), FRACT_NUM(0.703125), FRACT_NUM(0.699219), FRACT_NUM(0.695313), FRACT_NUM(0.691406),
	FRACT_NUM(0.687500), FRACT_NUM(0.683594), FRACT_NUM(0.679688), FRACT_NUM(0.675781), FRACT_NUM(0.671875), FRACT_NUM(0.667969), FRACT_NUM(0.664063), FRACT_NUM(0.660156),
	FRACT_NUM(0.656250), FRACT_NUM(0.652344), FRACT_NUM(0.648438), FRACT_NUM(0.644531), FRACT_NUM(0.640625), FRACT_NUM(0.636719), FRACT_NUM(0.632813), FRACT_NUM(0.628906),
	FRACT_NUM(0.625000), FRACT_NUM(0.621094), FRACT_NUM(0.617188), FRACT_NUM(0.613281), FRACT_NUM(0.609375), FRACT_NUM(0.605469), FRACT_NUM(0.601563), FRACT_NUM(0.597656),
	FRACT_NUM(0.593750), FRACT_NUM(0.589844), FRACT_NUM(0.585938), FRACT_NUM(0.582031), FRACT_NUM(0.578125), FRACT_NUM(0.574219), FRACT_NUM(0.570313), FRACT_NUM(0.566406),
	FRACT_NUM(0.562500), FRACT_NUM(0.558594), FRACT_NUM(0.554688), FRACT_NUM(0.550781), FRACT_NUM(0.546875), FRACT_NUM(0.542969), FRACT_NUM(0.539063), FRACT_NUM(0.535156),
	FRACT_NUM(0.531250), FRACT_NUM(0.527344), FRACT_NUM(0.523438), FRACT_NUM(0.519531), FRACT_NUM(0.515625), FRACT_NUM(0.511719), FRACT_NUM(0.507813), FRACT_NUM(0.503906),
	FRACT_NUM(0.500000), FRACT_NUM(0.496094), FRACT_NUM(0.492188), FRACT_NUM(0.488281), FRACT_NUM(0.484375), FRACT_NUM(0.480469), FRACT_NUM(0.476563), FRACT_NUM(0.472656),
	FRACT_NUM(0.468750), FRACT_NUM(0.464844), FRACT_NUM(0.460938), FRACT_NUM(0.457031), FRACT_NUM(0.453125), FRACT_NUM(0.449219), FRACT_NUM(0.445313), FRACT_NUM(0.441406),
	FRACT_NUM(0.437500), FRACT_NUM(0.433594), FRACT_NUM(0.429688), FRACT_NUM(0.425781), FRACT_NUM(0.421875), FRACT_NUM(0.417969), FRACT_NUM(0.414063), FRACT_NUM(0.410156),
	FRACT_NUM(0.406250), FRACT_NUM(0.402344), FRACT_NUM(0.398438), FRACT_NUM(0.394531), FRACT_NUM(0.390625), FRACT_NUM(0.386719), FRACT_NUM(0.382813), FRACT_NUM(0.378906),
	FRACT_NUM(0.375000), FRACT_NUM(0.371094), FRACT_NUM(0.367188), FRACT_NUM(0.363281), FRACT_NUM(0.359375), FRACT_NUM(0.355469), FRACT_NUM(0.351563), FRACT_NUM(0.347656),
	FRACT_NUM(0.343750), FRACT_NUM(0.339844), FRACT_NUM(0.335938), FRACT_NUM(0.332031), FRACT_NUM(0.328125), FRACT_NUM(0.324219), FRACT_NUM(0.320313), FRACT_NUM(0.316406),
	FRACT_NUM(0.312500), FRACT_NUM(0.308594), FRACT_NUM(0.304688), FRACT_NUM(0.300781), FRACT_NUM(0.296875), FRACT_NUM(0.292969), FRACT_NUM(0.289063), FRACT_NUM(0.285156),
	FRACT_NUM(0.281250), FRACT_NUM(0.277344), FRACT_NUM(0.273438), FRACT_NUM(0.269531), FRACT_NUM(0.265625), FRACT_NUM(0.261719), FRACT_NUM(0.257813), FRACT_NUM(0.253906),
	FRACT_NUM(0.250000), FRACT_NUM(0.246094), FRACT_NUM(0.242188), FRACT_NUM(0.238281), FRACT_NUM(0.234375), FRACT_NUM(0.230469), FRACT_NUM(0.226563), FRACT_NUM(0.222656),
	FRACT_NUM(0.218750), FRACT_NUM(0.214844), FRACT_NUM(0.210938), FRACT_NUM(0.207031), FRACT_NUM(0.203125), FRACT_NUM(0.199219), FRACT_NUM(0.195313), FRACT_NUM(0.191406),
	FRACT_NUM(0.187500), FRACT_NUM(0.183594), FRACT_NUM(0.179688), FRACT_NUM(0.175781), FRACT_NUM(0.171875), FRACT_NUM(0.167969), FRACT_NUM(0.164063), FRACT_NUM(0.160156),
	FRACT_NUM(0.156250), FRACT_NUM(0.152344), FRACT_NUM(0.148438), FRACT_NUM(0.144531), FRACT_NUM(0.140625), FRACT_NUM(0.136719), FRACT_NUM(0.132813), FRACT_NUM(0.128906),
	FRACT_NUM(0.125000), FRACT_NUM(0.121094), FRACT_NUM(0.117188), FRACT_NUM(0.113281), FRACT_NUM(0.109375), FRACT_NUM(0.105469), FRACT_NUM(0.101563), FRACT_NUM(0.097656),
	FRACT_NUM(0.093750), FRACT_NUM(0.089844), FRACT_NUM(0.085938), FRACT_NUM(0.082031), FRACT_NUM(0.078125), FRACT_NUM(0.074219), FRACT_NUM(0.070313), FRACT_NUM(0.066406),
	FRACT_NUM(0.062500), FRACT_NUM(0.058594), FRACT_NUM(0.054688), FRACT_NUM(0.050781), FRACT_NUM(0.046875), FRACT_NUM(0.042969), FRACT_NUM(0.039063), FRACT_NUM(0.035156),
	FRACT_NUM(0.031250), FRACT_NUM(0.027344), FRACT_NUM(0.023438), FRACT_NUM(0.019531), FRACT_NUM(0.015625), FRACT_NUM(0.011719), FRACT_NUM(0.007813), FRACT_NUM(0.003906),
	FRACT_NUM(0.000001), FRACT_NUM(0.003906), FRACT_NUM(0.007813), FRACT_NUM(0.011719), FRACT_NUM(0.015625), FRACT_NUM(0.019531), FRACT_NUM(0.023438), FRACT_NUM(0.027344),
	FRACT_NUM(0.031250), FRACT_NUM(0.035156), FRACT_NUM(0.039063), FRACT_NUM(0.042969), FRACT_NUM(0.046875), FRACT_NUM(0.050781), FRACT_NUM(0.054688), FRACT_NUM(0.058594),
	FRACT_NUM(0.062500), FRACT_NUM(0.066406), FRACT_NUM(0.070313), FRACT_NUM(0.074219), FRACT_NUM(0.078125), FRACT_NUM(0.082031), FRACT_NUM(0.085938), FRACT_NUM(0.089844),
	FRACT_NUM(0.093750), FRACT_NUM(0.097656), FRACT_NUM(0.101563), FRACT_NUM(0.105469), FRACT_NUM(0.109375), FRACT_NUM(0.113281), FRACT_NUM(0.117188), FRACT_NUM(0.121094),
	FRACT_NUM(0.125000), FRACT_NUM(0.128906), FRACT_NUM(0.132813), FRACT_NUM(0.136719), FRACT_NUM(0.140625), FRACT_NUM(0.144531), FRACT_NUM(0.148438), FRACT_NUM(0.152344),
	FRACT_NUM(0.156250), FRACT_NUM(0.160156), FRACT_NUM(0.164063), FRACT_NUM(0.167969), FRACT_NUM(0.171875), FRACT_NUM(0.175781), FRACT_NUM(0.179688), FRACT_NUM(0.183594),
	FRACT_NUM(0.187500), FRACT_NUM(0.191406), FRACT_NUM(0.195313), FRACT_NUM(0.199219), FRACT_NUM(0.203125), FRACT_NUM(0.207031), FRACT_NUM(0.210938), FRACT_NUM(0.214844),
	FRACT_NUM(0.218750), FRACT_NUM(0.222656), FRACT_NUM(0.226563), FRACT_NUM(0.230469), FRACT_NUM(0.234375), FRACT_NUM(0.238281), FRACT_NUM(0.242188), FRACT_NUM(0.246094),
	FRACT_NUM(0.250000), FRACT_NUM(0.253906), FRACT_NUM(0.257813), FRACT_NUM(0.261719), FRACT_NUM(0.265625), FRACT_NUM(0.269531), FRACT_NUM(0.273438), FRACT_NUM(0.277344),
	FRACT_NUM(0.281250), FRACT_NUM(0.285156), FRACT_NUM(0.289063), FRACT_NUM(0.292969), FRACT_NUM(0.296875), FRACT_NUM(0.300781), FRACT_NUM(0.304688), FRACT_NUM(0.308594),
	FRACT_NUM(0.312500), FRACT_NUM(0.316406), FRACT_NUM(0.320313), FRACT_NUM(0.324219), FRACT_NUM(0.328125), FRACT_NUM(0.332031), FRACT_NUM(0.335938), FRACT_NUM(0.339844),
	FRACT_NUM(0.343750), FRACT_NUM(0.347656), FRACT_NUM(0.351563), FRACT_NUM(0.355469), FRACT_NUM(0.359375), FRACT_NUM(0.363281), FRACT_NUM(0.367188), FRACT_NUM(0.371094),
	FRACT_NUM(0.375000), FRACT_NUM(0.378906), FRACT_NUM(0.382813), FRACT_NUM(0.386719), FRACT_NUM(0.390625), FRACT_NUM(0.394531), FRACT_NUM(0.398438), FRACT_NUM(0.402344),
	FRACT_NUM(0.406250), FRACT_NUM(0.410156), FRACT_NUM(0.414063), FRACT_NUM(0.417969), FRACT_NUM(0.421875), FRACT_NUM(0.425781), FRACT_NUM(0.429688), FRACT_NUM(0.433594),
	FRACT_NUM(0.437500), FRACT_NUM(0.441406), FRACT_NUM(0.445313), FRACT_NUM(0.449219), FRACT_NUM(0.453125), FRACT_NUM(0.457031), FRACT_NUM(0.460938), FRACT_NUM(0.464844),
	FRACT_NUM(0.468750), FRACT_NUM(0.472656), FRACT_NUM(0.476563), FRACT_NUM(0.480469), FRACT_NUM(0.484375), FRACT_NUM(0.488281), FRACT_NUM(0.492188), FRACT_NUM(0.496094)
};

DSPfract* p_triangle_table = triangle_table;

DSPfract square_table[TABLE_SIZE] =
{
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001)
};

DSPfract* p_square_table = square_table;

DSPfract squareSlopedEdges_table[TABLE_SIZE] =
{
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000),
	FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(1.000000), FRACT_NUM(0.976562), FRACT_NUM(0.878906),
	FRACT_NUM(0.781250), FRACT_NUM(0.683594), FRACT_NUM(0.585937), FRACT_NUM(0.488281), FRACT_NUM(0.390625), FRACT_NUM(0.292969), FRACT_NUM(0.195312), FRACT_NUM(0.097656),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001),
	FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.000001), FRACT_NUM(0.023438), FRACT_NUM(0.121094),
	FRACT_NUM(0.218750), FRACT_NUM(0.316406), FRACT_NUM(0.414063), FRACT_NUM(0.511719), FRACT_NUM(0.609375), FRACT_NUM(0.707031), FRACT_NUM(0.804688), FRACT_NUM(0.902344)
};

DSPfract* p_squareSlopedEdges_table = squareSlopedEdges_table;

DSPfract sine_table[TABLE_SIZE] =
{
	FRACT_NUM(0.500000), FRACT_NUM(0.506136), FRACT_NUM(0.512271), FRACT_NUM(0.518404), FRACT_NUM(0.524534), FRACT_NUM(0.530660), FRACT_NUM(0.536782), FRACT_NUM(0.542899),
	FRACT_NUM(0.549009), FRACT_NUM(0.555111), FRACT_NUM(0.561205), FRACT_NUM(0.567290), FRACT_NUM(0.573365), FRACT_NUM(0.579429), FRACT_NUM(0.585481), FRACT_NUM(0.591520),
	FRACT_NUM(0.597545), FRACT_NUM(0.603556), FRACT_NUM(0.609551), FRACT_NUM(0.615529), FRACT_NUM(0.621490), FRACT_NUM(0.627433), FRACT_NUM(0.633356), FRACT_NUM(0.639260),
	FRACT_NUM(0.645142), FRACT_NUM(0.651003), FRACT_NUM(0.656841), FRACT_NUM(0.662655), FRACT_NUM(0.668445), FRACT_NUM(0.674209), FRACT_NUM(0.679948), FRACT_NUM(0.685659),
	FRACT_NUM(0.691342), FRACT_NUM(0.696996), FRACT_NUM(0.702621), FRACT_NUM(0.708215), FRACT_NUM(0.713778), FRACT_NUM(0.719308), FRACT_NUM(0.724806), FRACT_NUM(0.730269),
	FRACT_NUM(0.735698), FRACT_NUM(0.741092), FRACT_NUM(0.746449), FRACT_NUM(0.751769), FRACT_NUM(0.757051), FRACT_NUM(0.762295), FRACT_NUM(0.767499), FRACT_NUM(0.772662),
	FRACT_NUM(0.777785), FRACT_NUM(0.782866), FRACT_NUM(0.787904), FRACT_NUM(0.792899), FRACT_NUM(0.797850), FRACT_NUM(0.802756), FRACT_NUM(0.807616), FRACT_NUM(0.812430),
	FRACT_NUM(0.817197), FRACT_NUM(0.821916), FRACT_NUM(0.826586), FRACT_NUM(0.831208), FRACT_NUM(0.835779), FRACT_NUM(0.840301), FRACT_NUM(0.844770), FRACT_NUM(0.849188),
	FRACT_NUM(0.853553), FRACT_NUM(0.857865), FRACT_NUM(0.862124), FRACT_NUM(0.866327), FRACT_NUM(0.870476), FRACT_NUM(0.874568), FRACT_NUM(0.878604), FRACT_NUM(0.882584),
	FRACT_NUM(0.886505), FRACT_NUM(0.890369), FRACT_NUM(0.894173), FRACT_NUM(0.897918), FRACT_NUM(0.901604), FRACT_NUM(0.905229), FRACT_NUM(0.908792), FRACT_NUM(0.912295),
	FRACT_NUM(0.915735), FRACT_NUM(0.919112), FRACT_NUM(0.922427), FRACT_NUM(0.925678), FRACT_NUM(0.928864), FRACT_NUM(0.931986), FRACT_NUM(0.935043), FRACT_NUM(0.938035),
	FRACT_NUM(0.940961), FRACT_NUM(0.943820), FRACT_NUM(0.946612), FRACT_NUM(0.949337), FRACT_NUM(0.951995), FRACT_NUM(0.954584), FRACT_NUM(0.957105), FRACT_NUM(0.959557),
	FRACT_NUM(0.961940), FRACT_NUM(0.964253), FRACT_NUM(0.966496), FRACT_NUM(0.968670), FRACT_NUM(0.970772), FRACT_NUM(0.972804), FRACT_NUM(0.974764), FRACT_NUM(0.976653),
	FRACT_NUM(0.978470), FRACT_NUM(0.980215), FRACT_NUM(0.981888), FRACT_NUM(0.983488), FRACT_NUM(0.985016), FRACT_NUM(0.986470), FRACT_NUM(0.987851), FRACT_NUM(0.989159),
	FRACT_NUM(0.990393), FRACT_NUM(0.991553), FRACT_NUM(0.992639), FRACT_NUM(0.993651), FRACT_NUM(0.994588), FRACT_NUM(0.995451), FRACT_NUM(0.996240), FRACT_NUM(0.996953),
	FRACT_NUM(0.997592), FRACT_NUM(0.998156), FRACT_NUM(0.998645), FRACT_NUM(0.999059), FRACT_NUM(0.999398), FRACT_NUM(0.999661), FRACT_NUM(0.999849), FRACT_NUM(0.999962),
	FRACT_NUM(1.000000), FRACT_NUM(0.999962), FRACT_NUM(0.999849), FRACT_NUM(0.999661), FRACT_NUM(0.999398), FRACT_NUM(0.999059), FRACT_NUM(0.998645), FRACT_NUM(0.998156),
	FRACT_NUM(0.997592), FRACT_NUM(0.996953), FRACT_NUM(0.996240), FRACT_NUM(0.995451), FRACT_NUM(0.994588), FRACT_NUM(0.993651), FRACT_NUM(0.992639), FRACT_NUM(0.991553),
	FRACT_NUM(0.990393), FRACT_NUM(0.989159), FRACT_NUM(0.987851), FRACT_NUM(0.986470), FRACT_NUM(0.985016), FRACT_NUM(0.983488), FRACT_NUM(0.981888), FRACT_NUM(0.980215),
	FRACT_NUM(0.978470), FRACT_NUM(0.976653), FRACT_NUM(0.974764), FRACT_NUM(0.972804), FRACT_NUM(0.970772), FRACT_NUM(0.968670), FRACT_NUM(0.966496), FRACT_NUM(0.964253),
	FRACT_NUM(0.961940), FRACT_NUM(0.959557), FRACT_NUM(0.957105), FRACT_NUM(0.954584), FRACT_NUM(0.951995), FRACT_NUM(0.949337), FRACT_NUM(0.946612), FRACT_NUM(0.943820),
	FRACT_NUM(0.940961), FRACT_NUM(0.938035), FRACT_NUM(0.935044), FRACT_NUM(0.931986), FRACT_NUM(0.928864), FRACT_NUM(0.925678), FRACT_NUM(0.922427), FRACT_NUM(0.919112),
	FRACT_NUM(0.915735), FRACT_NUM(0.912295), FRACT_NUM(0.908792), FRACT_NUM(0.905229), FRACT_NUM(0.901604), FRACT_NUM(0.897918), FRACT_NUM(0.894173), FRACT_NUM(0.890369),
	FRACT_NUM(0.886505), FRACT_NUM(0.882584), FRACT_NUM(0.878604), FRACT_NUM(0.874568), FRACT_NUM(0.870476), FRACT_NUM(0.866327), FRACT_NUM(0.862124), FRACT_NUM(0.857865),
	FRACT_NUM(0.853553), FRACT_NUM(0.849188), FRACT_NUM(0.844770), FRACT_NUM(0.840300), FRACT_NUM(0.835780), FRACT_NUM(0.831208), FRACT_NUM(0.826586), FRACT_NUM(0.821916),
	FRACT_NUM(0.817197), FRACT_NUM(0.812430), FRACT_NUM(0.807616), FRACT_NUM(0.802756), FRACT_NUM(0.797850), FRACT_NUM(0.792899), FRACT_NUM(0.787904), FRACT_NUM(0.782866),
	FRACT_NUM(0.777785), FRACT_NUM(0.772663), FRACT_NUM(0.767499), FRACT_NUM(0.762295), FRACT_NUM(0.757051), FRACT_NUM(0.751769), FRACT_NUM(0.746449), FRACT_NUM(0.741092),
	FRACT_NUM(0.735698), FRACT_NUM(0.730269), FRACT_NUM(0.724806), FRACT_NUM(0.719308), FRACT_NUM(0.713778), FRACT_NUM(0.708215), FRACT_NUM(0.702621), FRACT_NUM(0.696996),
	FRACT_NUM(0.691342), FRACT_NUM(0.685659), FRACT_NUM(0.679948), FRACT_NUM(0.674209), FRACT_NUM(0.668445), FRACT_NUM(0.662655), FRACT_NUM(0.656841), FRACT_NUM(0.651003),
	FRACT_NUM(0.645142), FRACT_NUM(0.639260), FRACT_NUM(0.633356), FRACT_NUM(0.627433), FRACT_NUM(0.621490), FRACT_NUM(0.615529), FRACT_NUM(0.609551), FRACT_NUM(0.603556),
	FRACT_NUM(0.597545), FRACT_NUM(0.591520), FRACT_NUM(0.585481), FRACT_NUM(0.579429), FRACT_NUM(0.573365), FRACT_NUM(0.567290), FRACT_NUM(0.561205), FRACT_NUM(0.555111),
	FRACT_NUM(0.549009), FRACT_NUM(0.542899), FRACT_NUM(0.536782), FRACT_NUM(0.530660), FRACT_NUM(0.524534), FRACT_NUM(0.518404), FRACT_NUM(0.512271), FRACT_NUM(0.506136),
	FRACT_NUM(0.500000), FRACT_NUM(0.493864), FRACT_NUM(0.487729), FRACT_NUM(0.481596), FRACT_NUM(0.475466), FRACT_NUM(0.469340), FRACT_NUM(0.463218), FRACT_NUM(0.457101),
	FRACT_NUM(0.450991), FRACT_NUM(0.444889), FRACT_NUM(0.438795), FRACT_NUM(0.432710), FRACT_NUM(0.426635), FRACT_NUM(0.420571), FRACT_NUM(0.414519), FRACT_NUM(0.408480),
	FRACT_NUM(0.402455), FRACT_NUM(0.396444), FRACT_NUM(0.390449), FRACT_NUM(0.384471), FRACT_NUM(0.378510), FRACT_NUM(0.372567), FRACT_NUM(0.366644), FRACT_NUM(0.360740),
	FRACT_NUM(0.354858), FRACT_NUM(0.348997), FRACT_NUM(0.343159), FRACT_NUM(0.337345), FRACT_NUM(0.331555), FRACT_NUM(0.325791), FRACT_NUM(0.320053), FRACT_NUM(0.314341),
	FRACT_NUM(0.308658), FRACT_NUM(0.303004), FRACT_NUM(0.297379), FRACT_NUM(0.291785), FRACT_NUM(0.286222), FRACT_NUM(0.280692), FRACT_NUM(0.275194), FRACT_NUM(0.269731),
	FRACT_NUM(0.264302), FRACT_NUM(0.258908), FRACT_NUM(0.253551), FRACT_NUM(0.248231), FRACT_NUM(0.242949), FRACT_NUM(0.237705), FRACT_NUM(0.232501), FRACT_NUM(0.227337),
	FRACT_NUM(0.222215), FRACT_NUM(0.217134), FRACT_NUM(0.212096), FRACT_NUM(0.207101), FRACT_NUM(0.202150), FRACT_NUM(0.197244), FRACT_NUM(0.192384), FRACT_NUM(0.187570),
	FRACT_NUM(0.182803), FRACT_NUM(0.178084), FRACT_NUM(0.173414), FRACT_NUM(0.168792), FRACT_NUM(0.164221), FRACT_NUM(0.159699), FRACT_NUM(0.155230), FRACT_NUM(0.150812),
	FRACT_NUM(0.146447), FRACT_NUM(0.142135), FRACT_NUM(0.137876), FRACT_NUM(0.133673), FRACT_NUM(0.129524), FRACT_NUM(0.125432), FRACT_NUM(0.121396), FRACT_NUM(0.117416),
	FRACT_NUM(0.113495), FRACT_NUM(0.109631), FRACT_NUM(0.105827), FRACT_NUM(0.102082), FRACT_NUM(0.098396), FRACT_NUM(0.094771), FRACT_NUM(0.091208), FRACT_NUM(0.087705),
	FRACT_NUM(0.084265), FRACT_NUM(0.080888), FRACT_NUM(0.077573), FRACT_NUM(0.074322), FRACT_NUM(0.071136), FRACT_NUM(0.068014), FRACT_NUM(0.064957), FRACT_NUM(0.061965),
	FRACT_NUM(0.059039), FRACT_NUM(0.056180), FRACT_NUM(0.053388), FRACT_NUM(0.050663), FRACT_NUM(0.048005), FRACT_NUM(0.045416), FRACT_NUM(0.042895), FRACT_NUM(0.040443),
	FRACT_NUM(0.038060), FRACT_NUM(0.035747), FRACT_NUM(0.033504), FRACT_NUM(0.031330), FRACT_NUM(0.029228), FRACT_NUM(0.027196), FRACT_NUM(0.025236), FRACT_NUM(0.023347),
	FRACT_NUM(0.021530), FRACT_NUM(0.019785), FRACT_NUM(0.018112), FRACT_NUM(0.016512), FRACT_NUM(0.014984), FRACT_NUM(0.013530), FRACT_NUM(0.012149), FRACT_NUM(0.010841),
	FRACT_NUM(0.009607), FRACT_NUM(0.008447), FRACT_NUM(0.007361), FRACT_NUM(0.006349), FRACT_NUM(0.005412), FRACT_NUM(0.004549), FRACT_NUM(0.003760), FRACT_NUM(0.003047),
	FRACT_NUM(0.002408), FRACT_NUM(0.001844), FRACT_NUM(0.001355), FRACT_NUM(0.000941), FRACT_NUM(0.000602), FRACT_NUM(0.000339), FRACT_NUM(0.000151), FRACT_NUM(0.000038),
	FRACT_NUM(0.000001), FRACT_NUM(0.000038), FRACT_NUM(0.000151), FRACT_NUM(0.000339), FRACT_NUM(0.000602), FRACT_NUM(0.000941), FRACT_NUM(0.001355), FRACT_NUM(0.001844),
	FRACT_NUM(0.002408), FRACT_NUM(0.003047), FRACT_NUM(0.003760), FRACT_NUM(0.004549), FRACT_NUM(0.005412), FRACT_NUM(0.006349), FRACT_NUM(0.007361), FRACT_NUM(0.008447),
	FRACT_NUM(0.009607), FRACT_NUM(0.010841), FRACT_NUM(0.012149), FRACT_NUM(0.013530), FRACT_NUM(0.014984), FRACT_NUM(0.016512), FRACT_NUM(0.018112), FRACT_NUM(0.019785),
	FRACT_NUM(0.021530), FRACT_NUM(0.023347), FRACT_NUM(0.025236), FRACT_NUM(0.027196), FRACT_NUM(0.029228), FRACT_NUM(0.031330), FRACT_NUM(0.033504), FRACT_NUM(0.035747),
	FRACT_NUM(0.038060), FRACT_NUM(0.040443), FRACT_NUM(0.042895), FRACT_NUM(0.045416), FRACT_NUM(0.048005), FRACT_NUM(0.050663), FRACT_NUM(0.053388), FRACT_NUM(0.056180),
	FRACT_NUM(0.059039), FRACT_NUM(0.061965), FRACT_NUM(0.064957), FRACT_NUM(0.068014), FRACT_NUM(0.071136), FRACT_NUM(0.074322), FRACT_NUM(0.077573), FRACT_NUM(0.080888),
	FRACT_NUM(0.084265), FRACT_NUM(0.087705), FRACT_NUM(0.091208), FRACT_NUM(0.094771), FRACT_NUM(0.098396), FRACT_NUM(0.102082), FRACT_NUM(0.105827), FRACT_NUM(0.109631),
	FRACT_NUM(0.113495), FRACT_NUM(0.117416), FRACT_NUM(0.121396), FRACT_NUM(0.125432), FRACT_NUM(0.129524), FRACT_NUM(0.133673), FRACT_NUM(0.137876), FRACT_NUM(0.142135),
	FRACT_NUM(0.146447), FRACT_NUM(0.150812), FRACT_NUM(0.155230), FRACT_NUM(0.159699), FRACT_NUM(0.164221), FRACT_NUM(0.168792), FRACT_NUM(0.173414), FRACT_NUM(0.178084),
	FRACT_NUM(0.182803), FRACT_NUM(0.187570), FRACT_NUM(0.192384), FRACT_NUM(0.197245), FRACT_NUM(0.202150), FRACT_NUM(0.207101), FRACT_NUM(0.212096), FRACT_NUM(0.217134),
	FRACT_NUM(0.222215), FRACT_NUM(0.227337), FRACT_NUM(0.232501), FRACT_NUM(0.237705), FRACT_NUM(0.242949), FRACT_NUM(0.248231), FRACT_NUM(0.253551), FRACT_NUM(0.258908),
	FRACT_NUM(0.264302), FRACT_NUM(0.269731), FRACT_NUM(0.275194), FRACT_NUM(0.280692), FRACT_NUM(0.286222), FRACT_NUM(0.291785), FRACT_NUM(0.297379), FRACT_NUM(0.303004),
	FRACT_NUM(0.308658), FRACT_NUM(0.314341), FRACT_NUM(0.320053), FRACT_NUM(0.325791), FRACT_NUM(0.331555), FRACT_NUM(0.337345), FRACT_NUM(0.343159), FRACT_NUM(0.348997),
	FRACT_NUM(0.354858), FRACT_NUM(0.360740), FRACT_NUM(0.366644), FRACT_NUM(0.372567), FRACT_NUM(0.378510), FRACT_NUM(0.384471), FRACT_NUM(0.390449), FRACT_NUM(0.396444),
	FRACT_NUM(0.402455), FRACT_NUM(0.408480), FRACT_NUM(0.414519), FRACT_NUM(0.420571), FRACT_NUM(0.426635), FRACT_NUM(0.432710), FRACT_NUM(0.438795), FRACT_NUM(0.444889),
	FRACT_NUM(0.450991), FRACT_NUM(0.457101), FRACT_NUM(0.463218), FRACT_NUM(0.469340), FRACT_NUM(0.475466), FRACT_NUM(0.481596), FRACT_NUM(0.487729), FRACT_NUM(0.493864)
};

DSPfract* p_sine_table = sine_table;

/////////////////////////////////////////////////////////////////////////////////
// Control state structure
/////////////////////////////////////////////////////////////////////////////////
typedef enum
{
	kWaveformSine = 1, 
	kWaveformTriangle,
	kWaveformSquare,
	kWaveformSquareSlopedEdges,
	kNumWaveforms
} wave_forms_t;

// Adjustable parameters:
typedef struct {
	DSPint numChannels;
	DSPfract LFO_frequency;			// LFO frequency (Hz)
	DSPfract depth;					// Depth of effect (0-1)
	wave_forms_t   waveform;		// What shape should be used for the LFO
	DSPfract lfoPhase;
	DSPaccum inverseSampleRate;
	DSPint index;
} tremolo_struct_t;
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// Tremolo effect parameters
/////////////////////////////////////////////////////////////////////////////////
tremolo_struct_t tremolo_data;
/////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// @Author	Dejan Martinov
// @Date	02.03.2018.
//
// Function:
// tremolo_init
//
// @param - tremolo_data - Control state structure
//
// @return - nothing
// Comment: Initialize tremolo structure
//
/////////////////////////////////////////////////////////////////////////////////
void tremolo_init()
{
	// Set default values:
	tremolo_data.LFO_frequency = FRACT_NUM(1.0);
	tremolo_data.depth = FRACT_NUM(1.0);
	tremolo_data.waveform = kWaveformSquare;
	tremolo_data.lfoPhase = FRACT_NUM(0.0);
	tremolo_data.inverseSampleRate = ACCUM_NUM(INVERSE_SAMPLE_RATE);
	tremolo_data.index = 0;
}

/////////////////////////////////////////////////////////////////////////////////
// @Author	Dejan Martinov
// @Date	02.03.2018.
//
// Function:
// tremolo_procces
//
// @param - input - Buffer with input samples
//		  - output - Buffer with output samples
//		  - data - Control state structure
//		  - numSamples - Length of buffer
//
// @return - nothing
// Comment: Apply tremolo to input samples
//
/////////////////////////////////////////////////////////////////////////////////
DSPfract lfo(DSPaccum phase);

void tremolo_procces(DSPfract* input, DSPfract* output)
{
	DSPaccum ph;
	DSPfract* p_in = input;
	DSPfract* p_out = output;
	DSPfract temp_lfo = FRACT_NUM(0.0);
	DSPaccum temp_depth;
	DSPaccum temp_phase;
	DSPint index;

	// Make a temporary copy of any state variables which need to be
	// maintained between calls to processBlock(). Each channel needs to be processed identically
	// which means that the activity of processing one channel can't affect the state variable for
	// the next channel.
	ph = tremolo_data.lfoPhase;
	index = tremolo_data.index;

	for (; p_in <= input + BLOCK_SIZE - 1; ++p_in, ++p_out)
	{
		//const DSPfract in = (DSPfract)*p_in;

		// Ring modulation is easy! Just multiply the waveform by a periodic carrier
		//temp_lfo = lfo(ph);
		//temp_depth = tremolo_data.depth * temp_lfo;
		//*p_out = *p_in * (FRACT_NUM(1.0) - temp_depth);


		//DSPint index = ph * ACCUM_NUM(512.0);

		if (index > MAX_LOOKUP_INDEX)
			index = MAX_LOOKUP_INDEX;

		*p_out = *p_in * (FRACT_NUM(1.0) - p_sine_table[index]);

		// Update the carrier and LFO phases), FRACT_NUM( keeping them in the range 0-1
		temp_phase = tremolo_data.inverseSampleRate;
		ph = ph + temp_phase;
		index++;

		if (index > MAX_LOOKUP_INDEX)
			index = 0;

	/*	if (ph >= FRACT_NUM(1.0))
			ph -= FRACT_NUM(1.0);*/
	}
	// Having made a local copy of the state variables for each channel), FRACT_NUM( now transfer the result
	// back to the main state variable so they will be preserved for the next call of processBlock()
	tremolo_data.lfoPhase = ph;
	tremolo_data.index = index;
}

DSPfract lfo(DSPaccum phase)
{
	if (tremolo_data.waveform == kWaveformTriangle)
	{
		if (phase < ACCUM_NUM(0.25))
		{
			return ACCUM_NUM(0.5) + (phase<<1);
		}
		else if (phase < ACCUM_NUM(0.75))
		{
			return ACCUM_NUM(1.0) - ((phase - ACCUM_NUM(0.25))<<1);
		}
		else
		{
			return (phase - ACCUM_NUM(0.75))<<1;
		}
	}
	else if (tremolo_data.waveform == kWaveformSquare)
	{
		if (phase < FRACT_NUM(0.5))
		{
			return FRACT_NUM(1.0);
		}
		else
		{
			return FRACT_NUM(0.0);
		}
	}
	else if (tremolo_data.waveform == kWaveformSquareSlopedEdges)
	{
		if (phase < ACCUM_NUM(0.48))
		{
			return ACCUM_NUM(1.0);
		}
		else if (phase < ACCUM_NUM(0.5))
		{
			return ACCUM_NUM(1.0) - (ACCUM_NUM(0.78125) << 6)*(phase - ACCUM_NUM(0.48));
		}
		else if (phase < ACCUM_NUM(0.98))
		{
			return ACCUM_NUM(0.0);
		}
		else
		{
			return (ACCUM_NUM(0.78125)<<6) * (phase - ACCUM_NUM(0.98));
		}
	}
	else
	{
		//return FRACT_NUM(0.5) + FRACT_NUM(0.5)*sinf(2.0 * PI * phase);
	}
}


/////////////////////////////////////////////////////////////////////////////////
// @Author	Dejan Martinov
// @Date	02.03.2018.
//
// Function:
// processing_foo
//
// @param - input - Buffer with input samples
//		  - output - Buffer with output samples
//		  - data - Control state structure
//		  - numSamples - Length of buffer
//
// @return - nothing
// Comment: process input samples
//
/////////////////////////////////////////////////////////////////////////////////
void processing_foo()
{
	DSPfract* p_L = sampleBufferLeft;
	DSPfract* p_R = sampleBufferRight;
	DSPaccum temp;

	for (; p_L <= sampleBufferLeft + BLOCK_SIZE - 1; p_L++, p_R++)
	{
		temp = *p_L * inputGain;
		*p_L = temp;

		temp = *p_R * inputGain;
		*p_R = temp;
	}

	// Add tremolo effect on Ls and Rs channels
	if (outputChannelNum == 4)
	{
		tremolo_procces(sampleBufferLeft, sampleBufferLeftSide);
		tremolo_procces(sampleBufferRight, sampleBufferRightSide);
	}
}

/////////////////////////////////////////////////////////////////////////////////
// @Author	Dejan Martinov
// @Date	02.03.2018.
//
// Function:
// main
//
// @param - argv[1] - Input file name
//        - argv[2] - Output file name
// @return - nothing
// Comment: main routine of a program
//
/////////////////////////////////////////////////////////////////////////////////
DSPint main(DSPint argc, char* argv[])
{
	FILE *wav_in = NULL;
	FILE *wav_out = NULL;
	char WavInputName[256];
	char WavOutputName[256];
	WAV_HEADER inputWAVhdr, outputWAVhdr;

	DSPint outputChannelNum = 4;

	// Init channel buffers
	for (DSPint i = 0; i<MAX_NUM_CHANNEL; i++)
		for (DSPint j = 0; j<BLOCK_SIZE; j++)
			sampleBuffer[i][j] = FRACT_NUM(0.0);

	// check for input arguments (input gain and mode)
	if (argc >= 4)
	{
		inputGain = pow(10, atoi(argv[3]) / 20.0);
	}

	if (argc == 5)
	{
		if (strcmp(argv[4], "2_0_0") == 0)
		{
			outputChannelNum = 2;
		}
	}

	// Open input and output wav files
	//-------------------------------------------------
	strcpy(WavInputName, argv[1]);
	wav_in = OpenWavFileForRead(WavInputName, "rb");
	strcpy(WavOutputName, argv[2]);
	wav_out = OpenWavFileForRead(WavOutputName, "wb");
	//-------------------------------------------------

	// Read input wav header
	//-------------------------------------------------
	ReadWavHeader(wav_in, inputWAVhdr);
	//-------------------------------------------------

	// Set up output WAV header
	//-------------------------------------------------	
	outputWAVhdr = inputWAVhdr;
	outputWAVhdr.fmt.NumChannels = outputChannelNum; // change number of channels

	int oneChannelSubChunk2Size = inputWAVhdr.data.SubChunk2Size / inputWAVhdr.fmt.NumChannels;
	int oneChannelByteRate = inputWAVhdr.fmt.ByteRate / inputWAVhdr.fmt.NumChannels;
	int oneChannelBlockAlign = inputWAVhdr.fmt.BlockAlign / inputWAVhdr.fmt.NumChannels;

	outputWAVhdr.data.SubChunk2Size = oneChannelSubChunk2Size*outputWAVhdr.fmt.NumChannels;
	outputWAVhdr.fmt.ByteRate = oneChannelByteRate*outputWAVhdr.fmt.NumChannels;
	outputWAVhdr.fmt.BlockAlign = oneChannelBlockAlign*outputWAVhdr.fmt.NumChannels;

	// Write output WAV header to file
	//-------------------------------------------------
	WriteWavHeader(wav_out, outputWAVhdr);

	// Init tremolo module
	tremolo_init();

	printf("Starting processing loop ...\n");
	// Processing loop
	//-------------------------------------------------	
	{
		int sample;
		int BytesPerSample = inputWAVhdr.fmt.BitsPerSample / 8;
		const double SAMPLE_SCALE = -(double)(1 << 31);		//2^31
		int iNumSamples = inputWAVhdr.data.SubChunk2Size / (inputWAVhdr.fmt.NumChannels*inputWAVhdr.fmt.BitsPerSample / 8);

		// exact file length should be handled correctly...
		for (int i = 0; i<iNumSamples / BLOCK_SIZE; i++)
		{
			for (int j = 0; j<BLOCK_SIZE; j++)
			{
				for (int k = 0; k<inputWAVhdr.fmt.NumChannels; k++)
				{
					sample = 0; //debug
					fread(&sample, BytesPerSample, 1, wav_in);
					sample = sample << (32 - inputWAVhdr.fmt.BitsPerSample); // force signextend
					sampleBuffer[k][j] = sample / SAMPLE_SCALE;				// scale sample to 1.0/-1.0 range

					if (inputWAVhdr.fmt.NumChannels == 1)
					{
						sampleBuffer[1][j] = sample / SAMPLE_SCALE;
					}
				}
			}

			processing_foo();

			for (int j = 0; j<BLOCK_SIZE; j++)
			{
				for (int k = 0; k<outputWAVhdr.fmt.NumChannels; k++)
				{
					sample = sampleBuffer[k][j].toLong();	// crude), FRACT_NUM( non-rounding 			
					sample = sample >> (32 - inputWAVhdr.fmt.BitsPerSample);
					fwrite(&sample, outputWAVhdr.fmt.BitsPerSample / 8, 1, wav_out);
				}
			}
		}
	}

	printf("Processing loop finished!\n");

	// Close files
	//-------------------------------------------------	
	fclose(wav_in);
	fclose(wav_out);
	//-------------------------------------------------	

	return 0;
}

